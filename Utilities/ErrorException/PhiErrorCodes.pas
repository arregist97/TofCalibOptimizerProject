unit PhiErrorCodes;

////////////////////////////////////////////////////////////////////////////////
//
// Filename:  PhiErrorCodes.pas
// Created:   on 11-09-01 by Melinda Caouette
// Purpose:   This module defines custom HRESULT values and some handy
//             error functions.
// History:
// 1) Initial version
//     - Melinda Caouette 11-09-01
//
// 2) Merged our current version with Revera's and took out errors
//    for unused modules.
//     - Melinda Caouette 06-23-04
//
// Note: Custom error codes are defined in both PhiErrorCodes.h
//        and this file.  PhiErrorCodes.h is for C++ and
//        this file is for Object Pascal.   It is very important
//        to make the same changes in PhiErrorCodes.h
//
//*********************************************************
// Copyright © 2001-04 Physical Electronics USA
// Created in 2001 as an unpublished copyrighted work.  This program
// and the information contained in it are confidential and proprietary
// to Physical Electronics and may not be used, copied, or reproduced
// without the prior written permission of Physical Electronics.
//
////////////////////////////////////////////////////////////////////////////////

interface

uses
  SysUtils,
  Windows;

type

  TErrorCodeRecord = record
    Code: HResult;
    Str:  String;
    MappedException: integer;
  end;

const
  HRESULT_BASE_S_VALUE           = $00044000 ;            // base value for all success HRESULTs
  HRESULT_BASE_VALUE             = $80040FA0 ;            // base value for all error HRESULTs
  SOFTWARE_HRESULT_BASE_VALUE    = (HRESULT_BASE_VALUE);   // base value for generic software error HRESULTs
  NAV_HRESULT_BASE_VALUE         = (HRESULT_BASE_VALUE + 100) ;   // base value for Navigation's error HRESULTs
  STAGE_HRESULT_BASE_VALUE       = (HRESULT_BASE_VALUE + 150) ;   // base value for Stage's error HRESULTs
  IGUN_HRESULT_BASE_VALUE        = (HRESULT_BASE_VALUE + 200) ;   // base value for Ion gun's error HRESULTs
  WH_HRESULT_BASE_VALUE          = (HRESULT_BASE_VALUE + 225) ;   // base value for Wafer Handler's error HRESULTs
  STATE_MACHINE_HRESULT_BASE_VALUE = (HRESULT_BASE_VALUE + 250);    // state machine
  LOGGER_HRESULT_BASE_VALUE        = (HRESULT_BASE_VALUE + 275);                    // SysLogQueue
  HARDWARE_OBJECTS_BASE_VALUE      = (HRESULT_BASE_VALUE + 300); // Commun' Objects.
  ERROR_AND_ALARM_HANDLER_BASE_VALUE = (HRESULT_BASE_VALUE + 350);
  UI_HRESULT_BASE_VALUE            = (HRESULT_BASE_VALUE + 375); // UI Errors
  XR_HRESULT_BASE_VALUE            = (HRESULT_BASE_VALUE + 450); // x-ray Errors
  REDUCTION_HRESULT_BASE_VALUE     = (HRESULT_BASE_VALUE + 475); // Reduction Errors
  XPS_ACQ_PROC_CTRL_HRESULT_BASE_VALUE = (HRESULT_BASE_VALUE + 525); // Delphi XPS acquisiton process control
  DATA_ACQ_EPC_HRESULT_BASE_VALUE =  (HRESULT_BASE_VALUE + 550);     // Delphi embedded PC data acq
  XPS_ACQ_CTRL_HRESULT_BASE_VALUE =  (HRESULT_BASE_VALUE + 575);     // Delphi XPS acquisition control
  ACQ_HDWR_CTRL_HRESULT_BASE_VALUE = (HRESULT_BASE_VALUE + 625);     // Acquisition Hardware Control Dll
  EGUN_NEUT_CTRL_HRESULT_BASE_VALUE = (HRESULT_BASE_VALUE + 675);    // EGun Neutralizer control Dll
  VAC_HDWR_CTRL_HRESULT_BASE_VALUE  = (HRESULT_BASE_VALUE + 700);    // Vacuum hardware control Dll
  MOTOR_HDWR_CTRL_HRESULT_BASE_VALUE  = (HRESULT_BASE_VALUE + 720);  // Motor hardware control Dll
  SAMPLE_HANDLING_HRESULT_BASE_VALUE  = (HRESULT_BASE_VALUE + 750);  // Sample handling
  PLATEN_TRANSFER_HRESULT_BASE_VALUE  = (HRESULT_BASE_VALUE + 775);  // platen transfer state machine
  IMAGING_DATA_HRESULT_BASE_VALUE = (HRESULT_BASE_VALUE + 800);      // Imaging Data EPC Dll
  SCANPATTERN_HRESULT_BASE_VALUE = (HRESULT_BASE_VALUE + 825);       // Scan Pattern
  FRAME_GRABBER_HRESULT_BASE_VALUE = (HRESULT_BASE_VALUE + 850);     // Frame grabber
  SAVING_DATA_HRESULT_BASE_VALUE = (HRESULT_BASE_VALUE + 875);       // Saving data state machine
  BAKE_PROCESS_CONTROL_HRESULT_BASE_VALUE = (HRESULT_BASE_VALUE + 900); // Bake process control
  MPC_CTRL_HRESULT_BASE_VALUE  = (HRESULT_BASE_VALUE + 925);         // MPC control
  VAC_PROCESS_CONTROL_HRESULT_BASE_VALUE = (HRESULT_BASE_VALUE + 950); // Vacuum process control
  CAMERA_CTRL_HRESULT_BASE_VALUE = (HRESULT_BASE_VALUE + 1000);// Camera control
  ION_GUN_PROCESS_CONTROL_HRESULT_BASE_VALUE = (HRESULT_BASE_VALUE + 1025);// ion gun process control
  C60_HRESULT_BASE_VALUE = (HRESULT_BASE_VALUE + 1050);              // C60 ion gun
  DUAL_ANODE_XRAY_HRESULT_BASE_VALUE = (HRESULT_BASE_VALUE + 1075);  // Dual anode x-ray
  GAUGE_HRESULT_BASE_VALUE = (HRESULT_BASE_VALUE + 1100);            // Gauge
  C60_ION_GUN_PROCESS_CONTROL_HRESULT_BASE_VALUE = (HRESULT_BASE_VALUE + 1125); // Gauge
  IMAGE_REGISTRATION_HRESULT_BASE_VALUE = (HRESULT_BASE_VALUE + 1150);  // base value for image registration
  IMAGE_REGISTRATION_PROCESS_CONTROL_BASE_VALUE = (HRESULT_BASE_VALUE + 1175);  // base value for image registration process control
  GCIB_PROCESS_CONTROL_HRESULT_BASE_VALUE = (HRESULT_BASE_VALUE + 1200);        // base value for GCIB process control
  DECONVOLUTION_HRESULT_BASE_VALUE = (HRESULT_BASE_VALUE + 1225);       // base value for deconvolution
  AUTO_VIDEO_PROCESS_CONTROL_BASE_VALUE = (HRESULT_BASE_VALUE + 1250);  // base value for auto video
  AMMETER_PROCESS_CONTROL_BASE_VALUE = (HRESULT_BASE_VALUE + 1275);     // base value for ammeter process control
  SEM_PROCESS_CONTROL_BASE_VALUE = (HRESULT_BASE_VALUE + 1300);         // base value for SEM process control
  HARDWARE_MANAGER_PROCESS_CONTROL_BASE_VALUE = (HRESULT_BASE_VALUE + 1325); // base value for hardware manager process control
  XRAY_PROCESS_CONTROL_BASE_VALUE = (HRESULT_BASE_VALUE + 1350); // base value for x-ray process control
  DSI_HRESULT_BASE_VALUE = (HRESULT_BASE_VALUE + 1375);          // base value for DSI hardware control
  HOTCOLD_PROCESS_CONTROL_BASE_VALUE = (HRESULT_BASE_VALUE + 1400);   // base value for Hot/Cold process control

  // Software Exceptions

  E_OBJECT_ALREADY_LOCKED      = HRESULT(SOFTWARE_HRESULT_BASE_VALUE );       // attempt to lock object already locked
  E_OBJECT_NOT_LOCKED          = HRESULT(SOFTWARE_HRESULT_BASE_VALUE + 1);    // attempt to unlock object not already locked
  E_BAD_LOCK_COOKIE            = HRESULT(SOFTWARE_HRESULT_BASE_VALUE + 2);    // bad lock cookie
  E_GET_SYNC_OBJECT            = HRESULT(SOFTWARE_HRESULT_BASE_VALUE + 3);    // fail to get sync object
  E_BAD_PARAMETER              = HRESULT(SOFTWARE_HRESULT_BASE_VALUE + 4);    // Bad parameter to a function call.

  E_TIMEOUT                    = HRESULT(SOFTWARE_HRESULT_BASE_VALUE + 5);    // Software Operation timed out.
  E_OPEN_EVENT                 = HRESULT(SOFTWARE_HRESULT_BASE_VALUE + 6);    // fail to open event
  E_CREATE_EVENT               = HRESULT(SOFTWARE_HRESULT_BASE_VALUE + 7);    // fail to create event
  E_WAIT_FOR_MUILTIPLE_OBJECTS = HRESULT(SOFTWARE_HRESULT_BASE_VALUE + 8);    // WaitForMultipleObjects failure
  E_SERVER_BUSY                = HRESULT(SOFTWARE_HRESULT_BASE_VALUE + 9);    // server is busy; can't start any task
  E_INTERNAL_ERROR             = HRESULT(SOFTWARE_HRESULT_BASE_VALUE + 10);
  E_OPERATING_SYSTEM_ERROR     = HRESULT(SOFTWARE_HRESULT_BASE_VALUE + 11);
  E_INITIALIZATION_ERROR       = HRESULT(SOFTWARE_HRESULT_BASE_VALUE + 12);
  E_CREATE_MMF                 = HRESULT(SOFTWARE_HRESULT_BASE_VALUE + 13);   // create memory map file error
  E_CREATE_MUTEX               = HRESULT(SOFTWARE_HRESULT_BASE_VALUE + 14);   // create mutex error
  E_UNABLE_TO_LOCK_COMM_DEVICE = HRESULT(SOFTWARE_HRESULT_BASE_VALUE + 15);   // cannot lock communication device
  E_SERVER_ABORTED             = HRESULT(SOFTWARE_HRESULT_BASE_VALUE + 16);
  E_SERVER_CANNOT_START        = HRESULT(SOFTWARE_HRESULT_BASE_VALUE + 17);
  E_INVALID_COMMAND            = HRESULT(SOFTWARE_HRESULT_BASE_VALUE + 18);

  // SysLogQueue
  LOGGER_E_CANT_OPEN_LOG_FILE  = HRESULT(LOGGER_HRESULT_BASE_VALUE) ;         // can't open sysLogQueue file
  LOGGER_E_CANT_CREATE_EVENT = HRESULT(LOGGER_HRESULT_BASE_VALUE + 1) ;              // can't create event
  LOGGER_E_CANT_CREATE_THREAD = HRESULT(LOGGER_HRESULT_BASE_VALUE + 2) ;             // can't create thread

  // State machine
  E_STATEMACHINE               = HRESULT(STATE_MACHINE_HRESULT_BASE_VALUE);

  // HRESULTS for IDefectSearch interface
  DEFECTSEARCH_E_INVALID_INIT = HRESULT(NAV_HRESULT_BASE_VALUE) ;
  DEFECTSEARCH_E_INVALID_FOV = HRESULT(NAV_HRESULT_BASE_VALUE + 1) ;
  DEFECTSEARCH_E_STAGE_MOVE = HRESULT(NAV_HRESULT_BASE_VALUE + 2) ;
  DEFECTSEARCH_E_SET_GET_IMAGE_SHIFT = HRESULT(NAV_HRESULT_BASE_VALUE + 3) ;

  // HRESULTS for IFileInfo interface
  FILEINFO_E_INVALID_INIT = HRESULT(NAV_HRESULT_BASE_VALUE + 4) ;
  FILEINFO_E_IMPROPER_LOCK = HRESULT(NAV_HRESULT_BASE_VALUE + 5) ;

  // HRESULTS for INavManager interface
  NAVMGR_E_INVALID_FILE_FORMAT = HRESULT(NAV_HRESULT_BASE_VALUE + 6) ;
  NAVMGR_E_IMPROPER_LOCK = HRESULT(NAV_HRESULT_BASE_VALUE + 7) ;
  NAVMGR_E_UNRECOGNIZED_FILE_FORMAT = HRESULT(NAV_HRESULT_BASE_VALUE + 8) ;
  NAVMGR_E_FAILED_TO_IMPORT_FILE = HRESULT(NAV_HRESULT_BASE_VALUE + 9) ;
  NAVMGR_E_INVALID_INIT = HRESULT(NAV_HRESULT_BASE_VALUE + 10) ;
  NAVMGR_E_OPERATION_FAILED = HRESULT(NAV_HRESULT_BASE_VALUE + 11) ;
  NAVMGR_E_FAILED_TO_GET_FILEINFO = HRESULT(NAV_HRESULT_BASE_VALUE + 12) ;
  NAVMGR_E_FAILED_TO_GET_WAFERINFO = HRESULT(NAV_HRESULT_BASE_VALUE + 13) ;
  NAVMGR_E_FAILED_TO_CLEAR_LIST = HRESULT(NAV_HRESULT_BASE_VALUE + 14) ;
  NAVMGR_E_FAILED_TO_EXPORT_LIST = HRESULT(NAV_HRESULT_BASE_VALUE + 15) ;
  NAVMGR_E_FAILED_TO_OPEN_FILE = HRESULT(NAV_HRESULT_BASE_VALUE + 16) ;
  NAVMGR_W_DEFECTS_MISSING = HRESULT(HRESULT_BASE_S_VALUE) ;

  // HRESULTS for IPositionList interface
  POSLIST_E_INVALID_INIT = HRESULT(NAV_HRESULT_BASE_VALUE + 18) ;
  POSLIST_E_IMPROPER_LOCK = HRESULT(NAV_HRESULT_BASE_VALUE + 19) ;
  POSLIST_E_OPERATION_FAILED = HRESULT(NAV_HRESULT_BASE_VALUE + 20) ;
  POSLIST_E_NO_POSITIONS = HRESULT(NAV_HRESULT_BASE_VALUE + 21);

  // HRESULTS for IUVStage interface
  UVSTAGE_E_INVALID_INIT = HRESULT(NAV_HRESULT_BASE_VALUE + 22) ;
  UVSTAGE_E_OPERATION_FAILED = HRESULT(NAV_HRESULT_BASE_VALUE + 23) ;
  UVSTAGE_E_IMPROPER_LOCK = HRESULT(NAV_HRESULT_BASE_VALUE + 24) ;
  UVSTAGE_E_UNSUPPORTED_ALIGNMENT = HRESULT(NAV_HRESULT_BASE_VALUE + 25) ;
  UVSTAGE_E_ALIGNMENT_NOT_ALLOWED = HRESULT(NAV_HRESULT_BASE_VALUE + 26) ;
  UVSTAGE_E_INVALID_POINT_TYPE = HRESULT(NAV_HRESULT_BASE_VALUE + 27) ;
  UVSTAGE_E_GET_CURR_STAGE_POS = HRESULT(NAV_HRESULT_BASE_VALUE + 28) ;
  UVSTAGE_E_ALIGN_CALC_ERROR = HRESULT(NAV_HRESULT_BASE_VALUE + 29) ;
  UVSTAGE_E_WAFER_TO_STAGE = HRESULT(NAV_HRESULT_BASE_VALUE + 30) ;
  UVSTAGE_E_INVALID_POS = HRESULT(NAV_HRESULT_BASE_VALUE + 31) ;
  UVSTAGE_E_SET_GET_IMAGE_SHIFT = HRESULT(HRESULT_BASE_VALUE + 32) ;
  UVSTAGE_E_INVALID_POINT_STATE = HRESULT(NAV_HRESULT_BASE_VALUE + 33) ;
  UVSTAGE_E_FAILED_TO_SET_ALIGNMENT_POINTS = HRESULT(NAV_HRESULT_BASE_VALUE + 34) ;
  UVSTAGE_E_INVALID_DIE_INDEX = HRESULT(NAV_HRESULT_BASE_VALUE + 35) ;
  UVSTAGE_E_FOV = HRESULT(NAV_HRESULT_BASE_VALUE + 36) ;

  // HRESULTS for IWaferInfo interface
  WAFERINFO_E_INVALID_INIT = HRESULT(NAV_HRESULT_BASE_VALUE + 37) ;
  WAFERINFO_E_IMPROPER_LOCK = HRESULT(NAV_HRESULT_BASE_VALUE + 38) ;
  WAFERINFO_E_INVALID_INDEX = HRESULT(NAV_HRESULT_BASE_VALUE + 39) ;
  WAFERINFO_E_NO_DIE = HRESULT(NAV_HRESULT_BASE_VALUE + 40) ;
  WAFERINFO_E_NOT_ON_DIE = HRESULT(NAV_HRESULT_BASE_VALUE + 41) ;
  WAFERINFO_E_FAILED_TO_SET_ORIENT_MARK_TYPE = HRESULT(NAV_HRESULT_BASE_VALUE + 42) ;

  // PHI Rtn Mess & errors
  STATUS_OK = HRESULT(HRESULT_BASE_S_VALUE + 1);
  IN_POSITION_OK = HRESULT(HRESULT_BASE_S_VALUE + 2);
  IN_MOTION_OK = HRESULT(HRESULT_BASE_S_VALUE + 3);
  //Stage
  AT_TRAVEL_LIMIT = HRESULT(STAGE_HRESULT_BASE_VALUE);
  POSITION_LIMIT_ERROR = HRESULT(STAGE_HRESULT_BASE_VALUE + 1);
  CANNOT_MOVE_ERROR = HRESULT(STAGE_HRESULT_BASE_VALUE + 2);
  CANNOT_EXECUTE_ERROR = HRESULT(STAGE_HRESULT_BASE_VALUE + 3);
  INVALID_INPUT_ERROR = HRESULT(STAGE_HRESULT_BASE_VALUE + 4);
  INVALID_AXIS_NUMBER_ERROR = HRESULT(STAGE_HRESULT_BASE_VALUE + 5);

  //Axis Mess.
  AXIS_OK = HRESULT(HRESULT_BASE_S_VALUE + 4);
  CLOSE_TO_TRAVEL_LIMIT = HRESULT(STAGE_HRESULT_BASE_VALUE + 6);
  AXIS_OFF_POSITION_ERROR = HRESULT(STAGE_HRESULT_BASE_VALUE + 7);
  AXIS_ERROR = HRESULT(STAGE_HRESULT_BASE_VALUE + 8);
  UNKNOWN_ERROR = HRESULT(STAGE_HRESULT_BASE_VALUE + 9);

  AXIS_NOT_CREATED_ERROR = HRESULT(STAGE_HRESULT_BASE_VALUE + 10);
  IOBOARD_NOT_CREATED_ERROR = HRESULT(STAGE_HRESULT_BASE_VALUE + 11);
  CONTROLLER_ERROR = HRESULT(STAGE_HRESULT_BASE_VALUE + 12);

  ARM_ERROR = HRESULT(STAGE_HRESULT_BASE_VALUE + 13);
  ARM_OK = HRESULT(HRESULT_BASE_S_VALUE + 5);
  ARM_LOCKED = HRESULT(STAGE_HRESULT_BASE_VALUE + 14);
  ARM_ILLEGAL_MOVE = HRESULT(STAGE_HRESULT_BASE_VALUE + 15);
  ARM_NOT_INITIALIZED = HRESULT(STAGE_HRESULT_BASE_VALUE + 16);

  ELEVATOR_ERROR = HRESULT(STAGE_HRESULT_BASE_VALUE + 17);
  ELEVATOR_OK = HRESULT(HRESULT_BASE_S_VALUE + 6);
  ELEVATOR_LOCKED = HRESULT(STAGE_HRESULT_BASE_VALUE + 18);
  ELEVATOR_ILLEGAL_MOVE = HRESULT(STAGE_HRESULT_BASE_VALUE + 19);
  ELEVATOR_NOT_INITIALIZED = HRESULT(STAGE_HRESULT_BASE_VALUE + 20);
  ELEVATOR_NOT_CALIBRATED = HRESULT(STAGE_HRESULT_BASE_VALUE + 21);

  STAGE_ERROR = HRESULT(STAGE_HRESULT_BASE_VALUE + 22);
  STAGE_OK = HRESULT(HRESULT_BASE_S_VALUE + 7);
  STAGE_LOCKED = HRESULT(STAGE_HRESULT_BASE_VALUE + 23);
  STAGE_ILLEGAL_MOVE = HRESULT(STAGE_HRESULT_BASE_VALUE + 24);
  STAGE_NOT_INITIALIZED = HRESULT(STAGE_HRESULT_BASE_VALUE + 25);
  STAGE_NOT_CALIBRATED = HRESULT(STAGE_HRESULT_BASE_VALUE + 26);

  E_ILLEGAL_REQUEST = HRESULT(STAGE_HRESULT_BASE_VALUE + 27);
  S_SIMULATED = HRESULT(HRESULT_BASE_S_VALUE + 8);
  E_CANNOT_GET_CRITSECT = HRESULT(STAGE_HRESULT_BASE_VALUE + 28);
  E_AXIS_INTERFEROMETER_ERROR = HRESULT(STAGE_HRESULT_BASE_VALUE + 29);

  S_GRABBED_OK = HRESULT(HRESULT_BASE_S_VALUE + 9);
  E_GRABBER_ERROR = HRESULT(STAGE_HRESULT_BASE_VALUE + 30);
  S_RELEASED_OK = HRESULT(HRESULT_BASE_S_VALUE + 10);
  S_RELEASING_OK = HRESULT(HRESULT_BASE_S_VALUE + 11);
  E_GRABBER_LOCKED = HRESULT(STAGE_HRESULT_BASE_VALUE + 31);
  S_GRABBER_OK = HRESULT(HRESULT_BASE_S_VALUE + 12);
  S_GRABBING_OK = HRESULT(HRESULT_BASE_S_VALUE + 13);

  AT_SOFT_LIMIT = HRESULT(STAGE_HRESULT_BASE_VALUE + 32);
  AT_DAC_VOLT_LIMIT = HRESULT(STAGE_HRESULT_BASE_VALUE + 33);
  AT_HOME_LIMIT = HRESULT(STAGE_HRESULT_BASE_VALUE + 34);

  BACKOUT_FROM_LIMIT = HRESULT(STAGE_HRESULT_BASE_VALUE + 35);
//  STAGE_NOT_HOMED = HRESULT(STAGE_HRESULT_BASE_VALUE + 35);
  STAGE_SERVO_MOTORS_OFF = HRESULT(STAGE_HRESULT_BASE_VALUE + 36);
  STAGE_IN_EMULATION_MODE = HRESULT(STAGE_HRESULT_BASE_VALUE + 37);
  STAGE_ERROR_IN_EMULATION_INFO_FILE = HRESULT(STAGE_HRESULT_BASE_VALUE + 38);
  STAGE_STATUS_FAILED = HRESULT(STAGE_HRESULT_BASE_VALUE + 39);
  STAGE_CONTROLLER_NOT_FOUND = HRESULT(STAGE_HRESULT_BASE_VALUE + 40);
  STAGE_WRONG_MACRO_SET = HRESULT(STAGE_HRESULT_BASE_VALUE + 41);
  STAGE_SOFT_LIMIT_TILTED = HRESULT(STAGE_HRESULT_BASE_VALUE + 42);
  // Update the constant below appropriately when adding new errors
  STAGE_LAST_ERROR_CODE = HRESULT(STAGE_HRESULT_BASE_VALUE + 42);

  // custom HRESULTs for ion gun
  IGUN_S_RASTER_CLIPPED = HRESULT(HRESULT_BASE_S_VALUE + 14) ;
  IGUN_S_TIMED_ON_CANCELLED  = (HRESULT_BASE_S_VALUE + 15) ;
  IGUN_E_INIT =HRESULT(IGUN_HRESULT_BASE_VALUE) ;
  IGUN_E_COM = HRESULT(IGUN_HRESULT_BASE_VALUE + 1) ;
  IGUN_E_RANGE = HRESULT(IGUN_HRESULT_BASE_VALUE + 2) ;
  IGUN_E_INVALID_CMD = HRESULT(IGUN_HRESULT_BASE_VALUE + 3) ;
  IGUN_E_WAIT_NOT_DONE = HRESULT(IGUN_HRESULT_BASE_VALUE + 4) ;
  IGUN_E_SUPPLY_TOL = HRESULT(IGUN_HRESULT_BASE_VALUE + 5) ;
  IGUN_LAST_ERROR_CODE = HRESULT(IGUN_HRESULT_BASE_VALUE + 5) ;

  // HRESULTS for IWaferHandler
  WH_E_WHIO = HRESULT(WH_HRESULT_BASE_VALUE) ;
  WH_E_CARRIERSTATION =HRESULT(WH_HRESULT_BASE_VALUE + 1);
  WH_E_ILLEGALREQUEST =HRESULT(WH_HRESULT_BASE_VALUE + 2);
  WH_E_RTZ_ROBOT =HRESULT(WH_HRESULT_BASE_VALUE + 3);
  WH_E_ME_PRESSURE =HRESULT(WH_HRESULT_BASE_VALUE + 4);
  WH_E_PREALIGNER =HRESULT(WH_HRESULT_BASE_VALUE + 5);
  WH_E_WHIO_VISO =HRESULT(WH_HRESULT_BASE_VALUE + 6);
  WH_E_ME_DOOR_SEAL =HRESULT(WH_HRESULT_BASE_VALUE + 7);
  WH_E_ME_WAFER_DOOR =HRESULT(WH_HRESULT_BASE_VALUE + 8);
  WH_E_SYS_VACUUM = HRESULT(WH_HRESULT_BASE_VALUE + 9);
  WH_E_ELEVATOR = HRESULT(WH_HRESULT_BASE_VALUE + 10);
  WH_E_SVC_PRE_XFER_CHECK_FAILED = HRESULT(WH_HRESULT_BASE_VALUE + 11);
  WH_E_SVC_TASK_TIMEOUT = HRESULT(WH_HRESULT_BASE_VALUE + 12);
  WH_E_NOCASSETTE = HRESULT(WH_HRESULT_BASE_VALUE + 13);
  WH_E_SVC_TASK_UNSUCCESFUL = HRESULT(WH_HRESULT_BASE_VALUE + 14);
  WH_E_SVC_CANT_GET_TASK_LOCK = HRESULT(WH_HRESULT_BASE_VALUE + 15);
  WH_E_PAL_FAILED_PREP_FOR_ALIGN = HRESULT(WH_HRESULT_BASE_VALUE + 16);
  WH_E_STATE_MACHINE_IN_ERROR_STATE = HRESULT(WH_HRESULT_BASE_VALUE + 17);
  WH_E_BUSY = HRESULT(WH_HRESULT_BASE_VALUE + 18);
  WH_E_NO_TASK_TO_RESTART = HRESULT(WH_HRESULT_BASE_VALUE + 19);
  WH_E_ABORTED = HRESULT(WH_HRESULT_BASE_VALUE + 20);

  // HResults for error and alarm handler
  EAAH_INVALID_ERROR_TABLE = HRESULT(ERROR_AND_ALARM_HANDLER_BASE_VALUE);
  EAAH_METAPORT_ALARM_DATABASE_ERROR = HRESULT(ERROR_AND_ALARM_HANDLER_BASE_VALUE + 1);
  EAAH_INVALID_PHI_ALARM_ERROR = HRESULT(ERROR_AND_ALARM_HANDLER_BASE_VALUE + 2);
  EAAH_ALARM_CLEARED_NOT_ACTIVE_ERROR = HRESULT(ERROR_AND_ALARM_HANDLER_BASE_VALUE + 3);
  EAAH_LIST_ACCESS_ERROR = HRESULT(ERROR_AND_ALARM_HANDLER_BASE_VALUE + 4);
  EAAH_DUPLICATE_ERROR = HRESULT(ERROR_AND_ALARM_HANDLER_BASE_VALUE + 5);
  EAAH_EVENT_NOTIFY_FAIL = HRESULT(ERROR_AND_ALARM_HANDLER_BASE_VALUE + 6);

  // HResults for general user interface errors
  UI_E_GENERAL = HRESULT(UI_HRESULT_BASE_VALUE);
  UI_E_ALARMS_DETECTED_AT_STARTUP = HRESULT(UI_HRESULT_BASE_VALUE + 1);
  UI_E_WAFER_POSITION_INCORRECT_AT_STARTUP = HRESULT(UI_HRESULT_BASE_VALUE + 2);
  UI_E_RECIPE_ALREADY_RUNNING = HRESULT(UI_HRESULT_BASE_VALUE + 3);
  UI_E_RECIPE_INVALID_NAME = HRESULT(UI_HRESULT_BASE_VALUE + 4);
  UI_E_INVALID_ALARM_DEFINITION = HRESULT(UI_HRESULT_BASE_VALUE + 6);

  // custom error HResults for XRaySource
  XR_E_INVALID_PARAMETER_RANGE = HRESULT(XR_HRESULT_BASE_VALUE);
  XR_E_UNIT_CANNOT_COMPLY = HRESULT(XR_HRESULT_BASE_VALUE + 1);
  XR_E_UNKNOWN_UNIT_RESPONSE = HRESULT(XR_HRESULT_BASE_VALUE + 2);
  XR_E_UNABLE_TO_SEND_CMD = HRESULT(XR_HRESULT_BASE_VALUE + 3);
  XR_E_FORMATTING_CMD_PACKET = HRESULT(XR_HRESULT_BASE_VALUE + 4);
  XR_E_ATTEMPT_TO_EXCEED_POWER_LIMIT = HRESULT(XR_HRESULT_BASE_VALUE + 5);
  XR_E_INTERLOCKS_NOT_MET = HRESULT(XR_HRESULT_BASE_VALUE + 6);
  XR_E_INVALID_UNIT_RESPONSE = HRESULT(XR_HRESULT_BASE_VALUE + 7);
  XR_E_INVALID_CMD = HRESULT(XR_HRESULT_BASE_VALUE + 8);

  // HResults for data reduction errors
  DR_E_NO_SILICON_DATA = HRESULT(REDUCTION_HRESULT_BASE_VALUE);
  DR_E_NO_NITROGEN_DATA = HRESULT(REDUCTION_HRESULT_BASE_VALUE + 1);
  DR_E_ERROR_FROM_LOADSPE = HRESULT(REDUCTION_HRESULT_BASE_VALUE + 2);
  DR_E_WARNING_FROM_LOADSPE = HRESULT(REDUCTION_HRESULT_BASE_VALUE + 3);

  // HResults for commuications and common hardware objects.
  E_DEVICE_NOT_INITIALIZED = HRESULT(HARDWARE_OBJECTS_BASE_VALUE);
  E_COMMAND_NOT_SUPPORTED = HRESULT(HARDWARE_OBJECTS_BASE_VALUE + 1);
  E_COMMAND_NOT_ALLOWED = HRESULT(HARDWARE_OBJECTS_BASE_VALUE + 2);
  E_INVALID_PARAMETER_RANGE = HRESULT(HARDWARE_OBJECTS_BASE_VALUE + 3);
  E_HARDWARE_OBJECT_ERROR = HRESULT(HARDWARE_OBJECTS_BASE_VALUE + 4);
  E_MIN_MAX_LIMITS_EXCEEDED = HRESULT(HARDWARE_OBJECTS_BASE_VALUE + 5);
  E_NO_DEVICE_OBJECT = HRESULT(HARDWARE_OBJECTS_BASE_VALUE + 6);
  E_COULD_NOT_FIND_DEVICE = HRESULT(HARDWARE_OBJECTS_BASE_VALUE + 7);
  E_NO_DATA = HRESULT(HARDWARE_OBJECTS_BASE_VALUE + 8);
  E_ANALYZER_REPORT_DATAACQ = HRESULT(HARDWARE_OBJECTS_BASE_VALUE + 9);
  E_DATAACQ_OVERFLOW = HRESULT(HARDWARE_OBJECTS_BASE_VALUE + 10);
  E_DATAACQ_DATAPOINT_MISMATCH = HRESULT(HARDWARE_OBJECTS_BASE_VALUE + 11);
  E_DATAACQ_OUTOFSYNC = HRESULT(HARDWARE_OBJECTS_BASE_VALUE + 12);
  E_DEVICE_RESPONSE_EXCEEDS_LIMITS = HRESULT(HARDWARE_OBJECTS_BASE_VALUE + 13);
  E_DEVICE_RESPONSE_CHKSUM_ERROR = HRESULT(HARDWARE_OBJECTS_BASE_VALUE + 14);
  E_DAC_OUT_OF_RANGE = HRESULT(HARDWARE_OBJECTS_BASE_VALUE + 15);

  E_SERIAL_DEVICE_OPEN_ERROR = HRESULT(HARDWARE_OBJECTS_BASE_VALUE + 16);
  E_SERIAL_DEVICE_WRITE_ERROR = HRESULT(HARDWARE_OBJECTS_BASE_VALUE + 17);
  E_SERIAL_DEVICE_READ_ERROR = HRESULT(HARDWARE_OBJECTS_BASE_VALUE + 18);
  E_SIM_DEVICE_OPEN_ERROR = HRESULT(HARDWARE_OBJECTS_BASE_VALUE + 19);
  E_SIM_DEVICE_WRITE_ERROR = HRESULT(HARDWARE_OBJECTS_BASE_VALUE + 20);
  E_SIM_DEVICE_READ_ERROR = HRESULT(HARDWARE_OBJECTS_BASE_VALUE + 21);
  E_USB_DEVICE_OPEN_ERROR = HRESULT(HARDWARE_OBJECTS_BASE_VALUE + 22);
  E_USB_DEVICE_WRITE_ERROR = HRESULT(HARDWARE_OBJECTS_BASE_VALUE + 23);
  E_USB_DEVICE_READ_ERROR = HRESULT(HARDWARE_OBJECTS_BASE_VALUE + 24);
  E_BULK_THREAD_ERROR = HRESULT(HARDWARE_OBJECTS_BASE_VALUE + 25);
  E_BULK_READ_ERROR = HRESULT(HARDWARE_OBJECTS_BASE_VALUE + 26);
  E_USB_STREAM_THREAD_ERROR = HRESULT(HARDWARE_OBJECTS_BASE_VALUE + 27);
  E_USB_STREAM_READ_ERROR = HRESULT(HARDWARE_OBJECTS_BASE_VALUE + 28);
  E_DEVICE_BAD_RESPONSE_ERROR = HRESULT(HARDWARE_OBJECTS_BASE_VALUE + 29);   // response from device is not expected

  // acquisition process control
  ACQPROCESSCTRL_E_UNABLE_TO_START_TASK = HRESULT(XPS_ACQ_PROC_CTRL_HRESULT_BASE_VALUE);
  ACQPROCESSCTRL_E_ACQ_NOT_VALID = HRESULT(XPS_ACQ_PROC_CTRL_HRESULT_BASE_VALUE + 1);
  ACQPROCESSCTRL_E_ACQ_ABORTED = HRESULT(XPS_ACQ_PROC_CTRL_HRESULT_BASE_VALUE + 2);
  ACQPROCESSCTRL_E_UNABLE_TO_RESTART_TASK = HRESULT(XPS_ACQ_PROC_CTRL_HRESULT_BASE_VALUE + 3);
  ACQPROCESSCTRL_E_UNABLE_TO_STOP_TASK = HRESULT(XPS_ACQ_PROC_CTRL_HRESULT_BASE_VALUE + 4);
  ACQPROCESSCTRL_E_UNABLE_TO_EXTEND_TASK = HRESULT(XPS_ACQ_PROC_CTRL_HRESULT_BASE_VALUE + 5);
  ACQPROCESSCTRL_E_UNABLE_TO_VALIDATE_TASK = HRESULT(XPS_ACQ_PROC_CTRL_HRESULT_BASE_VALUE + 6);
  ACQPROCESSCTRL_E_ACQ_ERROR = HRESULT(XPS_ACQ_PROC_CTRL_HRESULT_BASE_VALUE + 7);
  ACQPROCESSCTRL_E_INVALID_ARG = HRESULT(XPS_ACQ_PROC_CTRL_HRESULT_BASE_VALUE + 8);
  ACQPROCESSCTRL_E_DATA = HRESULT(XPS_ACQ_PROC_CTRL_HRESULT_BASE_VALUE + 9);
  ACQPROCESSCTRL_E_ACQ_STOPPED = HRESULT(XPS_ACQ_PROC_CTRL_HRESULT_BASE_VALUE + 10);
  ACQPROCESSCTRL_E_ACQ_RESTARTED = HRESULT(XPS_ACQ_PROC_CTRL_HRESULT_BASE_VALUE + 11);
  ACQPROCESSCTRL_E_SCAN_PATTERN_CLIPPING_ERROR = HRESULT(XPS_ACQ_PROC_CTRL_HRESULT_BASE_VALUE+12);

  // embedded pc data acquisition object
  DAE_E_UNABLE_TO_START_TASK = HRESULT(DATA_ACQ_EPC_HRESULT_BASE_VALUE);

  // XPS acquisition control
  ACQCTRL_E_ACQ_ABORTED = HRESULT(XPS_ACQ_CTRL_HRESULT_BASE_VALUE);
  ACQCTRL_E_TIMEOUT = HRESULT(XPS_ACQ_CTRL_HRESULT_BASE_VALUE + 1);
  ACQCTRL_E_BUSY = HRESULT(XPS_ACQ_CTRL_HRESULT_BASE_VALUE + 2);
  ACQCTRL_E_NO_TASK_TO_RESTART = HRESULT(XPS_ACQ_CTRL_HRESULT_BASE_VALUE + 3);
  ACQCTRL_E_UNINITIALIZE_EGUN_XRAY = HRESULT(XPS_ACQ_CTRL_HRESULT_BASE_VALUE + 4);
  ACQCTRL_E_UNINITIALIZE_BIAS_BOX = HRESULT(XPS_ACQ_CTRL_HRESULT_BASE_VALUE + 5);
  ACQCTRL_E_UNINITIALIZE_GAUZE_LENS = HRESULT(XPS_ACQ_CTRL_HRESULT_BASE_VALUE + 6);
  ACQCTRL_E_UNINITIALIZE_SCA_MULTIPLIER = HRESULT(XPS_ACQ_CTRL_HRESULT_BASE_VALUE + 7);
  ACQCTRL_E_UNINITIALIZE_SHUTTER_BIAS = HRESULT(XPS_ACQ_CTRL_HRESULT_BASE_VALUE + 8);
  ACQCTRL_E_UNINITIALIZE_EGUN_NEUT = HRESULT(XPS_ACQ_CTRL_HRESULT_BASE_VALUE + 9);
  ACQCTRL_E_UNINITIALIZE_SCA = HRESULT(XPS_ACQ_CTRL_HRESULT_BASE_VALUE + 10);
  ACQCTRL_E_INITIALIZE_HARDWARE = HRESULT(XPS_ACQ_CTRL_HRESULT_BASE_VALUE + 11);
  ACQCTRL_E_NO_TASK_TO_STOP = HRESULT(XPS_ACQ_CTRL_HRESULT_BASE_VALUE + 12);
  ACQCTRL_E_MOTION_ERROR = HRESULT(XPS_ACQ_CTRL_HRESULT_BASE_VALUE + 13);
  ACQCTRL_E_TIMED_SPUTTERING_ERROR = HRESULT(XPS_ACQ_CTRL_HRESULT_BASE_VALUE + 14);
  ACQCTRL_E_ACQ_ERROR = HRESULT(XPS_ACQ_CTRL_HRESULT_BASE_VALUE + 15);
  ACQCTRL_E_UNINITIALIZE_SPUTTER_SHUTTER = HRESULT(XPS_ACQ_CTRL_HRESULT_BASE_VALUE + 16);
  ACQCTRL_E_INVALID_ARG = HRESULT(XPS_ACQ_CTRL_HRESULT_BASE_VALUE + 17);
  ACQCTRL_E_IMAGE_REGISTRATION = HRESULT(XPS_ACQ_CTRL_HRESULT_BASE_VALUE + 18);
  ACQCTRL_E_DATA = HRESULT(XPS_ACQ_CTRL_HRESULT_BASE_VALUE + 19);
  ACQCTRL_E_ACQ_STOPPED = HRESULT(XPS_ACQ_CTRL_HRESULT_BASE_VALUE + 20);
  ACQCTRL_E_ACQ_RESTARTED = HRESULT(XPS_ACQ_CTRL_HRESULT_BASE_VALUE + 21);
  ACQCTRL_E_UNINITIALIZE_EGUN = HRESULT(XPS_ACQ_CTRL_HRESULT_BASE_VALUE + 22);

  // Acquisition Hardware Control Dll
  ACQ_E_EXTERNAL_ABORT = HRESULT(ACQ_HDWR_CTRL_HRESULT_BASE_VALUE);
  ACQ_E_INTERNAL_ERROR = HRESULT(ACQ_HDWR_CTRL_HRESULT_BASE_VALUE + 1);

  // EGun Neutralizer Hardware Control Dll
  ENEUT_E_COM = HRESULT(EGUN_NEUT_CTRL_HRESULT_BASE_VALUE);
  ENEUT_E_INIT = HRESULT(EGUN_NEUT_CTRL_HRESULT_BASE_VALUE + 1);
  ENEUT_E_PARAM_RANGE = HRESULT(EGUN_NEUT_CTRL_HRESULT_BASE_VALUE + 2);
  ENEUT_E_EC_STATUS_OUT_TOLERANCE = HRESULT(EGUN_NEUT_CTRL_HRESULT_BASE_VALUE + 3);
  ENEUT_E_EC_STATUS_UNKOWN = HRESULT(EGUN_NEUT_CTRL_HRESULT_BASE_VALUE + 4);
  ENEUT_E_EC_STATUS_TIMEOUT = HRESULT(EGUN_NEUT_CTRL_HRESULT_BASE_VALUE + 5);
  ENEUT_E_EC_STATUS_BLANKING = HRESULT(EGUN_NEUT_CTRL_HRESULT_BASE_VALUE + 6);
  ENEUT_E_FIL_STATUS_OUT_TOLERANCE = HRESULT(EGUN_NEUT_CTRL_HRESULT_BASE_VALUE + 7);
  ENEUT_E_FIL_STATUS_UNKOWN = HRESULT(EGUN_NEUT_CTRL_HRESULT_BASE_VALUE + 8);
  ENEUT_E_FIL_STATUS_TIMEOUT = HRESULT(EGUN_NEUT_CTRL_HRESULT_BASE_VALUE + 9);
  ENEUT_E_RESPONSE_UNKNOWN = HRESULT(EGUN_NEUT_CTRL_HRESULT_BASE_VALUE + 10);
  EGUN_NEUT_CTRL_LAST_ERROR_CODE = HRESULT(EGUN_NEUT_CTRL_HRESULT_BASE_VALUE + 10);

  // Vacuum Hardware Control
  VACCTRL_E_ABORTED = HRESULT(VAC_HDWR_CTRL_HRESULT_BASE_VALUE);
  VACCTRL_E_BUSY = HRESULT(VAC_HDWR_CTRL_HRESULT_BASE_VALUE + 1);  // vacuum module is busy => can't perform another task
  VAC_HDWR_CTRL_LAST_ERROR_CODE = HRESULT(VAC_HDWR_CTRL_HRESULT_BASE_VALUE + 1);

  // Motor Hardware Control
  MOTOR_E_OUTSIDE_AXIS_LIMIT = HRESULT(MOTOR_HDWR_CTRL_HRESULT_BASE_VALUE);
  MOTOR_E_CANNOT_SWITCH_MUX = HRESULT(MOTOR_HDWR_CTRL_HRESULT_BASE_VALUE + 1);
  MOTOR_E_TOUCH_SENSOR = HRESULT(MOTOR_HDWR_CTRL_HRESULT_BASE_VALUE + 2);
  MOTOR_E_ZALAR_SPEED_TOO_FAST = HRESULT(MOTOR_HDWR_CTRL_HRESULT_BASE_VALUE + 3);
  MOTOR_E_ZALAR_TOO_FAR_OFF_AXIS = HRESULT(MOTOR_HDWR_CTRL_HRESULT_BASE_VALUE + 4);
  MOTOR_E_ZALAR_OUTISE_LEGAL_ENVELOPE = HRESULT(MOTOR_HDWR_CTRL_HRESULT_BASE_VALUE + 5);
  MOTOR_E_TILT_SHOULD_BE_FLAT = HRESULT(MOTOR_HDWR_CTRL_HRESULT_BASE_VALUE + 6);
  MOTOR_E_MOTION_ERROR = HRESULT(MOTOR_HDWR_CTRL_HRESULT_BASE_VALUE + 7);
  MOTOR_E_ROTATE_TOO_FAR_OFF_AXIS = HRESULT(MOTOR_HDWR_CTRL_HRESULT_BASE_VALUE + 8);
  MOTOR_E_OUT_OF_MEMORY = HRESULT(MOTOR_HDWR_CTRL_HRESULT_BASE_VALUE + 9);
  MOTOR_E_NEED_INITIALIZATION = HRESULT(MOTOR_HDWR_CTRL_HRESULT_BASE_VALUE + 10);
  MOTOR_E_MONOCHROMATOR_DISABLED = HRESULT(MOTOR_HDWR_CTRL_HRESULT_BASE_VALUE + 11);
  MOTOR_E_MOTOR_DISABLED = HRESULT(MOTOR_HDWR_CTRL_HRESULT_BASE_VALUE + 12);
  MOTOR_E_NO_MOTOR_MOVE_AT_EXTREME_TILT = HRESULT(MOTOR_HDWR_CTRL_HRESULT_BASE_VALUE + 13);
  MOTOR_E_CANNOT_MOVE_TO_TARGET_POS = HRESULT(MOTOR_HDWR_CTRL_HRESULT_BASE_VALUE + 14);
  MOTOR_HDWR_CTRL_LAST_ERROR_CODE = HRESULT(MOTOR_HDWR_CTRL_HRESULT_BASE_VALUE + 14);

  // Sample Handling
  SAMPLE_HANDLING_E_TIMEOUT = HRESULT(SAMPLE_HANDLING_HRESULT_BASE_VALUE);
  SAMPLE_HANDLING_E_ABORTED = HRESULT(SAMPLE_HANDLING_HRESULT_BASE_VALUE + 1);
  SAMPLE_HANDLING_E_BUSY = HRESULT(SAMPLE_HANDLING_HRESULT_BASE_VALUE + 2);
  SAMPLE_HANDLING_E_XferFromPrepToOccupiedIntroWithSwap = HRESULT(SAMPLE_HANDLING_HRESULT_BASE_VALUE + 3);
  SAMPLE_HANDLING_E_XferToPrepWithSwap = HRESULT(SAMPLE_HANDLING_HRESULT_BASE_VALUE + 4);
  SAMPLE_HANDLING_E_XferAcrossOccupiedIntro = HRESULT(SAMPLE_HANDLING_HRESULT_BASE_VALUE + 5);
  SAMPLE_HANDLING_E_DestinationIsOccupiedWithNoParking = HRESULT(SAMPLE_HANDLING_HRESULT_BASE_VALUE + 6);
  SAMPLE_HANDLING_E_200mmStageIsOccupied = HRESULT(SAMPLE_HANDLING_HRESULT_BASE_VALUE + 7);
  SAMPLE_HANDLING_E_SourceAndDestinationAreSame = HRESULT(SAMPLE_HANDLING_HRESULT_BASE_VALUE + 8);
  SAMPLE_HANDLING_E_PlatenInArm = HRESULT(SAMPLE_HANDLING_HRESULT_BASE_VALUE + 9);
  SAMPLE_HANDLING_E_NoPlatenInSource = HRESULT(SAMPLE_HANDLING_HRESULT_BASE_VALUE + 10);
  SAMPLE_HANDLING_E_V13IsOpen = HRESULT(SAMPLE_HANDLING_HRESULT_BASE_VALUE + 11);
  SAMPLE_HANDLING_E_XferToPrepAndPrepIsOccupied = HRESULT(SAMPLE_HANDLING_HRESULT_BASE_VALUE + 12);
  SAMPLE_HANDLING_E_InsufficientLocationsToXfer = HRESULT(SAMPLE_HANDLING_HRESULT_BASE_VALUE + 13);
  SAMPLE_HANDLING_E_MotorError = HRESULT(SAMPLE_HANDLING_HRESULT_BASE_VALUE + 14);
  SAMPLE_HANDLING_E_VacuumError = HRESULT(SAMPLE_HANDLING_HRESULT_BASE_VALUE + 15);
  SAMPLE_HANDLING_E_NO_TASK_TO_RESUME = HRESULT(SAMPLE_HANDLING_HRESULT_BASE_VALUE + 16);
  SAMPLE_HANDLING_E_TASK_IS_INTERRUPTED= HRESULT(SAMPLE_HANDLING_HRESULT_BASE_VALUE + 17);
  SAMPLE_HANDLING_E_IG_SETMODE_FAILED = HRESULT(SAMPLE_HANDLING_HRESULT_BASE_VALUE + 18);
  SAMPLE_HANDLING_E_AUX_TRANSFER_PROBE_INSERTED = HRESULT(SAMPLE_HANDLING_HRESULT_BASE_VALUE + 19);
  SAMPLE_HANDLING_LAST_ERROR_CODE = HRESULT(SAMPLE_HANDLING_HRESULT_BASE_VALUE + 19);

  // Platen transfer state machine
  PLATEN_TRANSFER_E_TIMEOUT = HRESULT(PLATEN_TRANSFER_HRESULT_BASE_VALUE);
  PLATEN_TRANSFER_E_ABORTED = HRESULT(PLATEN_TRANSFER_HRESULT_BASE_VALUE + 1);
  PLATEN_TRANSFER_E_BUSY = HRESULT(PLATEN_TRANSFER_HRESULT_BASE_VALUE + 2);
  PLATEN_TRANSFER_LAST_ERROR_CODE = HRESULT(PLATEN_TRANSFER_HRESULT_BASE_VALUE + 2);

  // Imaging Data EPC Dll
  IMAGEDATA_E_NOSOCK = HRESULT(IMAGING_DATA_HRESULT_BASE_VALUE);
  IMAGEDATA_E_TIMEOUT = HRESULT(IMAGING_DATA_HRESULT_BASE_VALUE + 1);
  IMAGEDATA_E_BADDATA = HRESULT(IMAGING_DATA_HRESULT_BASE_VALUE + 2);
  IMAGEDATA_E_SIZE = HRESULT(IMAGING_DATA_HRESULT_BASE_VALUE + 3);
  IMAGEDATA_E_MEMMAP = HRESULT(IMAGING_DATA_HRESULT_BASE_VALUE + 4);
  IMAGEDATA_E_INIT_FAILED = HRESULT(IMAGING_DATA_HRESULT_BASE_VALUE + 5);
  IMAGEDATA_LAST_ERROR_CODE = HRESULT(IMAGING_DATA_HRESULT_BASE_VALUE + 5);

  // Scan Pattern
  SCANPATTERN_E_SXIAREA = HRESULT(SCANPATTERN_HRESULT_BASE_VALUE);
  SCANPATTERN_E_HPAREA = HRESULT(SCANPATTERN_HRESULT_BASE_VALUE + 1);
  SCANPATTERN_E_SCANSIZE = HRESULT(SCANPATTERN_HRESULT_BASE_VALUE + 2);
  SCANPATTERN_E_MIXEDAREAS = HRESULT(SCANPATTERN_HRESULT_BASE_VALUE + 3);
  SCANPATTERN_E_MAXNUMAREAS = HRESULT(SCANPATTERN_HRESULT_BASE_VALUE + 4);
  SCANPATTERN_E_SCANCLIPPING = HRESULT(SCANPATTERN_HRESULT_BASE_VALUE + 5);
  SCANPATTERN_E_DACRESOLUTION = HRESULT(SCANPATTERN_HRESULT_BASE_VALUE + 6);
  SCANPATTERN_LAST_ERROR_CODE = HRESULT(SCANPATTERN_HRESULT_BASE_VALUE + 6);

  // Frame Grabber
  FRAMEGRABBER_E_HALT = HRESULT(FRAME_GRABBER_HRESULT_BASE_VALUE);
  FRAMEGRABBER_E_SWITCH_CHANNEL = HRESULT(FRAME_GRABBER_HRESULT_BASE_VALUE + 1);
  FRAMEGRABBER_E_GRAB = HRESULT(FRAME_GRABBER_HRESULT_BASE_VALUE + 2);
  FRAMEGRABBER_E_INITIALIZE = HRESULT(FRAME_GRABBER_HRESULT_BASE_VALUE + 3);
  FRAMEGRABBER_E_COPY_TO_CLIPBOARD = HRESULT(FRAME_GRABBER_HRESULT_BASE_VALUE + 4);
  FRAMEGRABBER_E_SAVE_TO_FILE = HRESULT(FRAME_GRABBER_HRESULT_BASE_VALUE + 5);
  FRAMEGRABBER_E_CLIP_IMAGE = HRESULT(FRAME_GRABBER_HRESULT_BASE_VALUE + 6);
  FRAMEGRABBER_E_LOAD = HRESULT(FRAME_GRABBER_HRESULT_BASE_VALUE + 7);
  FRAMEGRABBER_E_FILE_ALREAY_EXIST = HRESULT(FRAME_GRABBER_HRESULT_BASE_VALUE + 8);
  FRAMEGRABBER_E_FILE_NOT_EXIST = HRESULT(FRAME_GRABBER_HRESULT_BASE_VALUE + 9);
  FRAMEGRABBER_E_MISSING_CAMERA = HRESULT(FRAME_GRABBER_HRESULT_BASE_VALUE + 10);

  // Saving Data state machine
  SAVING_DATA_E_BUSY = HRESULT(SAVING_DATA_HRESULT_BASE_VALUE);
  SAVING_DATA_E_ABORTED = HRESULT(SAVING_DATA_HRESULT_BASE_VALUE+1);

  // Bake Process Control
  BAKE_PROCESS_CONTROL_E_BUSY = HRESULT(BAKE_PROCESS_CONTROL_HRESULT_BASE_VALUE);
  BAKE_PROCESS_CONTROL_THERMOCOUPLE_ABORT_TEMPERATURE = HRESULT(BAKE_PROCESS_CONTROL_HRESULT_BASE_VALUE+1);
  BAKE_PROCESS_CONTROL_E_BAKE_NOT_PREPARED = HRESULT(BAKE_PROCESS_CONTROL_HRESULT_BASE_VALUE+2);
  BAKE_PROCESS_CONTROL_E_REACH_MAX_ION_PUMP_RESTART = HRESULT(BAKE_PROCESS_CONTROL_HRESULT_BASE_VALUE+3);
  BAKE_PROCESS_CONTROL_E_NO_TASK_TO_RESUME = HRESULT(BAKE_PROCESS_CONTROL_HRESULT_BASE_VALUE+4);
  BAKE_PROCESS_CONTROL_E_CANNOT_CLOSE_UPPER_BYPASS_VALVE = HRESULT(BAKE_PROCESS_CONTROL_HRESULT_BASE_VALUE+5);

  // MPC hardware control
  MPC_E_ABORTED = HRESULT(MPC_CTRL_HRESULT_BASE_VALUE);

  // Vacuum Process Control
  VAC_PROCESS_CONTROL_E_BUSY = HRESULT(VAC_PROCESS_CONTROL_HRESULT_BASE_VALUE);
  VAC_PROCESS_CONTROL_E_ABORTED = HRESULT(VAC_PROCESS_CONTROL_HRESULT_BASE_VALUE+1);
  VAC_PROCESS_CONTROL_E_INPROPER_TURBO_SPEED =  HRESULT(VAC_PROCESS_CONTROL_HRESULT_BASE_VALUE+2);
  VAC_PROCESS_CONTROL_E_ION_PUMP_OFF_NOT_CONFIRMED =  HRESULT(VAC_PROCESS_CONTROL_HRESULT_BASE_VALUE+3);
  VAC_PROCESS_CONTROL_E_ION_PUMP_START_VOLT_NOT_REACHED =  HRESULT(VAC_PROCESS_CONTROL_HRESULT_BASE_VALUE+4);
  VAC_PROCESS_CONTROL_E_ION_PUMP_STEADY_NOT_REACHED =  HRESULT(VAC_PROCESS_CONTROL_HRESULT_BASE_VALUE+5);
  VAC_PROCESS_CONTROL_E_DIFF_PUMP_IS_ON =  HRESULT(VAC_PROCESS_CONTROL_HRESULT_BASE_VALUE+6);
  VAC_PROCESS_CONTROL_E_NO_AUX_CHAMBER =  HRESULT(VAC_PROCESS_CONTROL_HRESULT_BASE_VALUE+7);
  VAC_PROCESS_CONTROL_E_AUX_PROBE_NOT_RETRACTED =  HRESULT(VAC_PROCESS_CONTROL_HRESULT_BASE_VALUE+8);
  VAC_PROCESS_CONTROL_E_AUX_PRESSURE_TOO_HIGH =  HRESULT(VAC_PROCESS_CONTROL_HRESULT_BASE_VALUE+9);
  VAC_PROCESS_CONTROL_E_AUX_PRESSURE_NOT_APPROP =  HRESULT(VAC_PROCESS_CONTROL_HRESULT_BASE_VALUE+10);
  VAC_PROCESS_CONTROL_E_V13_STATUS_NOT_CONFIRMED =  HRESULT(VAC_PROCESS_CONTROL_HRESULT_BASE_VALUE+11);
  VAC_PROCESS_CONTROL_E_V13_NOT_WORKING =  HRESULT(VAC_PROCESS_CONTROL_HRESULT_BASE_VALUE+12);
  VAC_PROCESS_CONTROL_E_INTRO_DOOR_NOT_WORKING =  HRESULT(VAC_PROCESS_CONTROL_HRESULT_BASE_VALUE+13);
  VAC_PROCESS_CONTROL_E_V1_NOT_WORKING =  HRESULT(VAC_PROCESS_CONTROL_HRESULT_BASE_VALUE+14);
  VAC_PROCESS_CONTROL_E_CHMBR_PRESSURE_TOO_HIGH_V1 = HRESULT(VAC_PROCESS_CONTROL_HRESULT_BASE_VALUE+15);
  VAC_PROCESS_CONTROL_E_CHMBR_PRESSURE_TOO_LOW = HRESULT(VAC_PROCESS_CONTROL_HRESULT_BASE_VALUE+16);
  VAC_PROCESS_CONTROL_E_CHMBR_PRESSURE_NOT_CONFIRMED_START_ION_PUMP =  HRESULT(VAC_PROCESS_CONTROL_HRESULT_BASE_VALUE+17);
  VAC_PROCESS_CONTROL_E_INTRO_NOT_PUMPED_DOWN = HRESULT(VAC_PROCESS_CONTROL_HRESULT_BASE_VALUE+18);
  VAC_PROCESS_CONTROL_E_TURBO_V1_NOT_WORKING = HRESULT(VAC_PROCESS_CONTROL_HRESULT_BASE_VALUE+19);
  VAC_PROCESS_CONTROL_E_CHMBR_PRESSURE_NOT_CONFIRMED_BACKFILL_CHMBR = HRESULT(VAC_PROCESS_CONTROL_HRESULT_BASE_VALUE+20);
  VAC_PROCESS_CONTROL_E_V1_STUCK =  HRESULT(VAC_PROCESS_CONTROL_HRESULT_BASE_VALUE+21);
  VAC_PROCESS_CONTROL_E_SYSTEM_NOT_PUMPED_DOWN =  HRESULT(VAC_PROCESS_CONTROL_HRESULT_BASE_VALUE+22);
  VAC_PROCESS_CONTROL_E_V1_STUCK_OR_ARM_IN_INTRO =  HRESULT(VAC_PROCESS_CONTROL_HRESULT_BASE_VALUE+23);
  VAC_PROCESS_CONTROL_E_TURBO_PUMP_CHMBR_NOT_CONFIRMED =  HRESULT(VAC_PROCESS_CONTROL_HRESULT_BASE_VALUE+24);
  VAC_PROCESS_CONTROL_E_INTRO_PRESSURE_NOT_CONFIRMED =  HRESULT(VAC_PROCESS_CONTROL_HRESULT_BASE_VALUE+25);
  VAC_PROCESS_CONTROL_E_INTRO_NOT_VENTED =  HRESULT(VAC_PROCESS_CONTROL_HRESULT_BASE_VALUE+26);
  VAC_PROCESS_CONTROL_E_CHMBR_PRESSURE_NOT_CONFIRMED = HRESULT(VAC_PROCESS_CONTROL_HRESULT_BASE_VALUE+27);
  VAC_PROCESS_CONTROL_E_ARGON_LEAK_ON = HRESULT(VAC_PROCESS_CONTROL_HRESULT_BASE_VALUE+28);
  VAC_PROCESS_CONTROL_E_OXYGEN_LEAK_ON = HRESULT(VAC_PROCESS_CONTROL_HRESULT_BASE_VALUE+29);
  VAC_PROCESS_CONTROL_E_CHMBR_PRESSURE_TOO_HIGH = HRESULT(VAC_PROCESS_CONTROL_HRESULT_BASE_VALUE+30);
  VAC_PROCESS_CONTROL_E_DIFF_PUMP_IS_OFF =  HRESULT(VAC_PROCESS_CONTROL_HRESULT_BASE_VALUE+31);
  VAC_PROCESS_CONTROL_E_MAIN_TURBO_NOT_OFF =  HRESULT(VAC_PROCESS_CONTROL_HRESULT_BASE_VALUE+32);
  VAC_PROCESS_CONTROL_E_NO_TASK_TO_RESUME =  HRESULT(VAC_PROCESS_CONTROL_HRESULT_BASE_VALUE+33);
  VAC_PROCESS_CONTROL_E_HC_STAGE_TEMP_DISALLOW_BACKFILL_INTRO =  HRESULT(VAC_PROCESS_CONTROL_HRESULT_BASE_VALUE+34);
  VAC_PROCESS_CONTROL_E_MAIN_TMP_SPEED_TOO_LOW = HRESULT(VAC_PROCESS_CONTROL_HRESULT_BASE_VALUE+35);
  VAC_PROCESS_CONTROL_E_PRESSURE_READ_OUT_OF_RANGE = HRESULT(VAC_PROCESS_CONTROL_HRESULT_BASE_VALUE+36);
  VAC_PROCESS_CONTROL_E_PRESSURE_READ_ERROR = HRESULT(VAC_PROCESS_CONTROL_HRESULT_BASE_VALUE+37);

  // Canon Camera Control
  CAMERA_CONTROL_E_INITIALIZE = HRESULT(CAMERA_CTRL_HRESULT_BASE_VALUE);
  CAMERA_CONTROL_E_CAMERANOTFOUND = HRESULT(CAMERA_CTRL_HRESULT_BASE_VALUE + 1);
  CAMERA_CONTROL_E_UNABLEGETDEVICEINFO = HRESULT(CAMERA_CTRL_HRESULT_BASE_VALUE + 2);
  CAMERA_CONTROL_E_CONNECT = HRESULT(CAMERA_CTRL_HRESULT_BASE_VALUE + 3);
  CAMERA_CONTROL_E_UILOCK = HRESULT(CAMERA_CTRL_HRESULT_BASE_VALUE + 4);
  CAMERA_CONTROL_E_TAKEPICTURE = HRESULT(CAMERA_CTRL_HRESULT_BASE_VALUE + 5);
  CAMERA_CONTROL_E_FILETRANSFER = HRESULT(CAMERA_CTRL_HRESULT_BASE_VALUE + 6);
  CAMERA_CONTROL_E_PROPERTY = HRESULT(CAMERA_CTRL_HRESULT_BASE_VALUE + 7);
  CAMERA_CONTROL_E_AFNG = HRESULT(CAMERA_CTRL_HRESULT_BASE_VALUE + 8);
  CAMERA_CONTROL_E_PRESSSHUTTERBUTTONOFF = HRESULT(CAMERA_CTRL_HRESULT_BASE_VALUE + 9);

  // Ion Gun Process Control
  ION_GUN_PROCESS_CONTROL_E_BUSY = HRESULT(ION_GUN_PROCESS_CONTROL_HRESULT_BASE_VALUE);
  ION_GUN_PROCESS_CONTROL_E_ABORTED = HRESULT(ION_GUN_PROCESS_CONTROL_HRESULT_BASE_VALUE+1);
  ION_GUN_PROCESS_CONTROL_E_VAC_ERROR = HRESULT(ION_GUN_PROCESS_CONTROL_HRESULT_BASE_VALUE+2);
  ION_GUN_PROCESS_CONTROL_E_TIMEOUT = HRESULT(ION_GUN_PROCESS_CONTROL_HRESULT_BASE_VALUE+3);
  ION_GUN_PROCESS_CONTROL_E_TIMED_ON = HRESULT(ION_GUN_PROCESS_CONTROL_HRESULT_BASE_VALUE+4);

  // C60 ion gun hardware control
  C60_GUN_OFF_CANNOT_READ = HRESULT(C60_HRESULT_BASE_VALUE);

  // Dual Anode XRay hardware control
  DUAL_ANODE_XRAY_E_INVALID_PARAMETER_RANGE = HRESULT(DUAL_ANODE_XRAY_HRESULT_BASE_VALUE);
  DUAL_ANODE_XRAY_E_EXCEED_POWER_LIMIT = HRESULT(DUAL_ANODE_XRAY_HRESULT_BASE_VALUE+1);
  DUAL_ANODE_XRAY_E_INTERLOCKS_NOT_MET = HRESULT(DUAL_ANODE_XRAY_HRESULT_BASE_VALUE+2);

  // C60 Ion Gun Process Control
  C60_ION_GUN_PROCESS_CONTROL_E_BUSY = HRESULT(C60_ION_GUN_PROCESS_CONTROL_HRESULT_BASE_VALUE);
  C60_ION_GUN_PROCESS_CONTROL_E_ABORTED = HRESULT(C60_ION_GUN_PROCESS_CONTROL_HRESULT_BASE_VALUE+1);
  C60_ION_GUN_PROCESS_CONTROL_E_TIMEOUT = HRESULT(C60_ION_GUN_PROCESS_CONTROL_HRESULT_BASE_VALUE+2);
  C60_ION_GUN_PROCESS_CONTROL_E_TIMED_ON = HRESULT(C60_ION_GUN_PROCESS_CONTROL_HRESULT_BASE_VALUE+3);

  // GCIB Process Control
  GCIB_PROCESS_CONTROL_E_BUSY = HRESULT(GCIB_PROCESS_CONTROL_HRESULT_BASE_VALUE);
  GCIB_PROCESS_CONTROL_E_ABORTED = HRESULT(GCIB_PROCESS_CONTROL_HRESULT_BASE_VALUE+1);
  GCIB_PROCESS_CONTROL_E_TIMEOUT = HRESULT(GCIB_PROCESS_CONTROL_HRESULT_BASE_VALUE+2);
  GCIB_PROCESS_CONTROL_E_TIMED_ON = HRESULT(GCIB_PROCESS_CONTROL_HRESULT_BASE_VALUE+3);
  GCIB_PROCESS_CONTROL_E_INTERLOCK = HRESULT(GCIB_PROCESS_CONTROL_HRESULT_BASE_VALUE+4);

  // Gauge
  GAUGE_E_GAUGE_NOT_SUPPORTED = HRESULT(GAUGE_HRESULT_BASE_VALUE);

  // Image Registration
  IMAGE_REGISTRATION_E_MMF = HRESULT(IMAGE_REGISTRATION_HRESULT_BASE_VALUE);
  IMAGE_REGISTRATION_E_HIT_EDGE = HRESULT(IMAGE_REGISTRATION_HRESULT_BASE_VALUE + 1);

  // Image Registration Process Control
  IMAGE_REGISTRATION_PROCESS_CONTROL_E_ABORTED = HRESULT(IMAGE_REGISTRATION_PROCESS_CONTROL_BASE_VALUE);
  IMAGE_REGISTRATION_PROCESS_CONTROL_E_START_SEM = HRESULT(IMAGE_REGISTRATION_PROCESS_CONTROL_BASE_VALUE+1);
  IMAGE_REGISTRATION_PROCESS_CONTROL_E_ROUTINE_SEARCH = HRESULT(IMAGE_REGISTRATION_PROCESS_CONTROL_BASE_VALUE+2);
  IMAGE_REGISTRATION_PROCESS_CONTROL_E_BUSY = HRESULT(IMAGE_REGISTRATION_PROCESS_CONTROL_BASE_VALUE+3);
  IMAGE_REGISTRATION_PROCESS_CONTROL_E_LOAD_REF_IMAGE = HRESULT(IMAGE_REGISTRATION_PROCESS_CONTROL_BASE_VALUE+4);
  IMAGE_REGISTRATION_PROCESS_CONTROL_E_REF_IMAGE_NOT_EXIST = HRESULT(IMAGE_REGISTRATION_PROCESS_CONTROL_BASE_VALUE+5);
  IMAGE_REGISTRATION_PROCESS_CONTROL_E_NO_TASK_TO_RESTART = HRESULT(IMAGE_REGISTRATION_PROCESS_CONTROL_BASE_VALUE + 6);
  IMAGE_REGISTRATION_PROCESS_CONTROL_E_SET_HARDWARE = HRESULT(IMAGE_REGISTRATION_PROCESS_CONTROL_BASE_VALUE + 7);
  IMAGE_REGISTRATION_PROCESS_CONTROL_E_ACQ = HRESULT(IMAGE_REGISTRATION_PROCESS_CONTROL_BASE_VALUE+8);
  IMAGE_REGISTRATION_PROCESS_CONTROL_E_IGNORE_ERROR = HRESULT(IMAGE_REGISTRATION_PROCESS_CONTROL_BASE_VALUE+9);
  IMAGE_REGISTRATION_PROCESS_CONTROL_E_ROUTINE_CONFIDENCE_LOW_ERROR = HRESULT(IMAGE_REGISTRATION_PROCESS_CONTROL_BASE_VALUE+10);
  IMAGE_REGISTRATION_PROCESS_CONTROL_E_SCAN_PATTERN_CLIPPING_ERROR = HRESULT(IMAGE_REGISTRATION_PROCESS_CONTROL_BASE_VALUE+11);

  // Auto Video Process Control
  AUTO_VIDEO_PROCESS_CONTROL_E_ABORTED = HRESULT(AUTO_VIDEO_PROCESS_CONTROL_BASE_VALUE);
  AUTO_VIDEO_PROCESS_CONTROL_E_BUSY = HRESULT(AUTO_VIDEO_PROCESS_CONTROL_BASE_VALUE+1);
  AUTO_VIDEO_PROCESS_CONTROL_E_NO_TASK_TO_RESTART = HRESULT(AUTO_VIDEO_PROCESS_CONTROL_BASE_VALUE + 2);
  AUTO_VIDEO_PROCESS_CONTROL_E_SET_HARDWARE = HRESULT(AUTO_VIDEO_PROCESS_CONTROL_BASE_VALUE + 3);
  AUTO_VIDEO_PROCESS_CONTROL_E_ACQ = HRESULT(AUTO_VIDEO_PROCESS_CONTROL_BASE_VALUE+4);
  AUTO_VIDEO_PROCESS_CONTROL_E_START_SEM = HRESULT(AUTO_VIDEO_PROCESS_CONTROL_BASE_VALUE+5);

  // Ammeter Process Control
  AMMETER_PROCESS_CONTROL_E_ABORTED = HRESULT(AMMETER_PROCESS_CONTROL_BASE_VALUE);
  AMMETER_PROCESS_CONTROL_E_BUSY = HRESULT(AMMETER_PROCESS_CONTROL_BASE_VALUE+1);

  // SEM Process Control
  SEM_PROCESS_CONTROL_E_ABORTED = HRESULT(SEM_PROCESS_CONTROL_BASE_VALUE);
  SEM_PROCESS_CONTROL_E_BUSY = HRESULT(SEM_PROCESS_CONTROL_BASE_VALUE+1);
  SEM_PROCESS_CONTROL_E_CANNOT_START_FE = HRESULT(SEM_PROCESS_CONTROL_BASE_VALUE+2);

  // Deconvolution
  DECONVOLUTION_E_BAD_TARGET_PE = HRESULT(DECONVOLUTION_HRESULT_BASE_VALUE);
  DECONVOLUTION_E_NO_CALIB_FILE_AVAILABLE = HRESULT(DECONVOLUTION_HRESULT_BASE_VALUE+1);
  DECONVOLUTION_E_BAD_CALIB_PATH = HRESULT(DECONVOLUTION_HRESULT_BASE_VALUE+2);

  // Hardware Manager Process Control
  HMPC_E_NO_ACTION_PERFORMED = HRESULT(HARDWARE_MANAGER_PROCESS_CONTROL_BASE_VALUE);

  // X-Ray Process Control
  XRAY_PROCESS_CONTROL_E_BUSY = HRESULT(XRAY_PROCESS_CONTROL_BASE_VALUE);
  XRAY_PROCESS_CONTROL_E_ABORTED = HRESULT(XRAY_PROCESS_CONTROL_BASE_VALUE+1);
  XRAY_PROCESS_CONTROL_E_INTERFACE_UNASSIGNED = HRESULT(XRAY_PROCESS_CONTROL_BASE_VALUE+2);

  // DSI hardware control
  DSI_E_NEED_INIT = HRESULT(DSI_HRESULT_BASE_VALUE) ;
  DSI_E_INVALID_CMD = HRESULT(DSI_HRESULT_BASE_VALUE + 1) ;
  DSI_E_INVALID_PARAMETER_ = HRESULT(DSI_HRESULT_BASE_VALUE + 2) ;
  DSI_E_SAMPLE_BIAS_NOT_GROUNDED = HRESULT(DSI_HRESULT_BASE_VALUE + 3) ;
  DSI_E_SHUTDOWN = HRESULT(DSI_HRESULT_BASE_VALUE + 4) ;
  DSI_E_SERVER_BUSY = HRESULT(DSI_HRESULT_BASE_VALUE + 5) ;

  // DSI hardware control
  HOTCOLD_PROCESS_CONTROL_E_BUSY = HRESULT(HOTCOLD_PROCESS_CONTROL_BASE_VALUE) ;
  HOTCOLD_PROCESS_CONTROL_E_ABORTED = HRESULT(HOTCOLD_PROCESS_CONTROL_BASE_VALUE + 1);
  HOTCOLD_PROCESS_CONTROL_E_TIMEOUT = HRESULT(HOTCOLD_PROCESS_CONTROL_BASE_VALUE + 2) ;
  HOTCOLD_PROCESS_CONTROL_E_CTRLSTATE_IS_FAIL = HRESULT(HOTCOLD_PROCESS_CONTROL_BASE_VALUE + 3) ;
  HOTCOLD_PROCESS_CONTROL_E_CTRLSTATE_IS_OPEN = HRESULT(HOTCOLD_PROCESS_CONTROL_BASE_VALUE + 4) ;

  ErrorCodeArray: array[0..436] of TErrorCodeRecord =
    (
  (Code: E_OBJECT_ALREADY_LOCKED                   ;   Str:'E_OBJECT_ALREADY_LOCKED';                   MappedException: E_INTERNAL_ERROR ),
  (Code: E_OBJECT_NOT_LOCKED                       ;   Str:'E_OBJECT_NOT_LOCKED';                       MappedException: E_INTERNAL_ERROR ),
  (Code: E_BAD_LOCK_COOKIE                         ;   Str:'E_BAD_LOCK_COOKIE';                         MappedException: E_INTERNAL_ERROR ),
  (Code: E_GET_SYNC_OBJECT                         ;   Str:'E_GET_SYNC_OBJECT';                         MappedException: E_INTERNAL_ERROR ),
  (Code: E_BAD_PARAMETER                           ;   Str:'E_BAD_PARAMETER';                           MappedException: E_INTERNAL_ERROR ),
  (Code: E_TIMEOUT                                 ;   Str:'E_TIMEOUT';                                 MappedException: E_INTERNAL_ERROR ),
  (Code: E_STATEMACHINE                            ;   Str:'E_STATEMACHINE';                            MappedException: E_INTERNAL_ERROR ),
  (Code: E_OPEN_EVENT                              ;   Str:'E_OPEN_EVENT';                              MappedException: E_INTERNAL_ERROR ),
  (Code: E_CREATE_EVENT                            ;   Str:'E_CREATE_EVENT';                            MappedException: E_INTERNAL_ERROR ),
  (Code: E_WAIT_FOR_MUILTIPLE_OBJECTS              ;   Str:'E_WAIT_FOR_MUILTIPLE_OBJECTS';              MappedException: E_INTERNAL_ERROR ),
  (Code: LOGGER_E_CANT_OPEN_LOG_FILE               ;   Str:'LOGGER_E_CANT_OPEN_LOG_FILE';               MappedException: E_INTERNAL_ERROR ),
  (Code: LOGGER_E_CANT_CREATE_EVENT                ;   Str:'LOGGER_E_CANT_CREATE_EVENT';                MappedException: E_INTERNAL_ERROR ),
  (Code: LOGGER_E_CANT_CREATE_THREAD               ;   Str:'LOGGER_E_CANT_CREATE_THREAD';               MappedException: E_INTERNAL_ERROR ),
  (Code: E_SERVER_BUSY                             ;   Str:'E_SERVER_BUSY';                             MappedException: E_INTERNAL_ERROR ),
  (Code: E_INTERNAL_ERROR                          ;   Str:'E_INTERNAL_ERROR';                          MappedException: 0 ),
  (Code: E_SERVER_ABORTED                          ;   Str:'E_SERVER_ABORTED';                          MappedException: E_INTERNAL_ERROR ),
  (Code: E_SERVER_CANNOT_START                     ;   Str:'E_SERVER_CANNOT_START';                     MappedException: E_INTERNAL_ERROR ),
  (Code: E_INITIALIZATION_ERROR                    ;   Str:'E_INITIALIZATION_ERROR';                    MappedException: 0 ),
  (Code: E_CREATE_MMF                              ;   Str:'E_CREATE_MMF';                              MappedException: 0 ),
  (Code: E_CREATE_MUTEX                            ;   Str:'E_CREATE_MUTEX';                            MappedException: 0 ),
  (Code: E_UNABLE_TO_LOCK_COMM_DEVICE              ;   Str:'E_UNABLE_TO_LOCK_COMM_DEVICE';              MappedException: 0 ),
  (Code: E_OPERATING_SYSTEM_ERROR                  ;   Str:'E_OPERATING_SYSTEM_ERROR';                  MappedException: 0 ),
  (Code: E_INVALID_COMMAND                         ;   Str:'E_INVALID_COMMAND';                         MappedException: E_INTERNAL_ERROR ),
  (Code: DEFECTSEARCH_E_INVALID_INIT               ;   Str:'DEFECTSEARCH_E_INVALID_INIT';               MappedException: E_INTERNAL_ERROR ),
  (Code: DEFECTSEARCH_E_INVALID_FOV                ;   Str:'DEFECTSEARCH_E_INVALID_FOV';                MappedException: E_INTERNAL_ERROR ),
  (Code: DEFECTSEARCH_E_STAGE_MOVE                 ;   Str:'DEFECTSEARCH_E_STAGE_MOVE';                 MappedException: E_INTERNAL_ERROR ),
  (Code: DEFECTSEARCH_E_SET_GET_IMAGE_SHIFT        ;   Str:'DEFECTSEARCH_E_SET_GET_IMAGE_SHIFT';        MappedException: E_INTERNAL_ERROR ),
  (Code: FILEINFO_E_INVALID_INIT                   ;   Str:'FILEINFO_E_INVALID_INIT';                   MappedException: E_INTERNAL_ERROR ),
  (Code: FILEINFO_E_IMPROPER_LOCK                  ;   Str:'FILEINFO_E_IMPROPER_LOCK';                  MappedException: E_INTERNAL_ERROR ),
  (Code: NAVMGR_E_INVALID_FILE_FORMAT              ;   Str:'NAVMGR_E_INVALID_FILE_FORMAT';              MappedException: E_INTERNAL_ERROR ),
  (Code: NAVMGR_E_IMPROPER_LOCK                    ;   Str:'NAVMGR_E_IMPROPER_LOCK';                    MappedException: E_INTERNAL_ERROR ),
  (Code: NAVMGR_E_UNRECOGNIZED_FILE_FORMAT         ;   Str:'NAVMGR_E_UNRECOGNIZED_FILE_FORMAT';         MappedException: E_INTERNAL_ERROR ),
  (Code: NAVMGR_E_FAILED_TO_IMPORT_FILE            ;   Str:'NAVMGR_E_FAILED_TO_IMPORT_FILE';            MappedException: E_INTERNAL_ERROR ),
  (Code: NAVMGR_E_INVALID_INIT                     ;   Str:'NAVMGR_E_INVALID_INIT';                     MappedException: E_INTERNAL_ERROR ),
  (Code: NAVMGR_E_OPERATION_FAILED                 ;   Str:'NAVMGR_E_OPERATION_FAILED';                 MappedException: E_INTERNAL_ERROR ),
  (Code: NAVMGR_E_FAILED_TO_GET_FILEINFO           ;   Str:'NAVMGR_E_FAILED_TO_GET_FILEINFO';           MappedException: E_INTERNAL_ERROR ),
  (Code: NAVMGR_E_FAILED_TO_GET_WAFERINFO          ;   Str:'NAVMGR_E_FAILED_TO_GET_WAFERINFO';          MappedException: E_INTERNAL_ERROR ),
  (Code: NAVMGR_E_FAILED_TO_CLEAR_LIST             ;   Str:'NAVMGR_E_FAILED_TO_CLEAR_LIST';             MappedException: E_INTERNAL_ERROR ),
  (Code: NAVMGR_E_FAILED_TO_EXPORT_LIST            ;   Str:'NAVMGR_E_FAILED_TO_EXPORT_LIST';            MappedException: E_INTERNAL_ERROR ),
  (Code: NAVMGR_E_FAILED_TO_OPEN_FILE              ;   Str:'NAVMGR_E_FAILED_TO_OPEN_FILE';              MappedException: E_INTERNAL_ERROR ),
  (Code: NAVMGR_W_DEFECTS_MISSING                  ;   Str:'NAVMGR_W_DEFECTS_MISSING';                  MappedException: E_INTERNAL_ERROR ),
  (Code: POSLIST_E_INVALID_INIT                    ;   Str:'POSLIST_E_INVALID_INIT';                    MappedException: E_INTERNAL_ERROR ),
  (Code: POSLIST_E_IMPROPER_LOCK                   ;   Str:'POSLIST_E_IMPROPER_LOCK';                   MappedException: E_INTERNAL_ERROR ),
  (Code: POSLIST_E_OPERATION_FAILED                ;   Str:'POSLIST_E_OPERATION_FAILED';                MappedException: E_INTERNAL_ERROR ),
  (Code: POSLIST_E_NO_POSITIONS                    ;   Str:'POSLIST_E_NO_POSITIONS';                    MappedException: E_INTERNAL_ERROR ),
  (Code: UVSTAGE_E_INVALID_INIT                    ;   Str:'UVSTAGE_E_INVALID_INIT';                    MappedException: E_INTERNAL_ERROR ),
  (Code: UVSTAGE_E_OPERATION_FAILED                ;   Str:'UVSTAGE_E_OPERATION_FAILED';                MappedException: E_INTERNAL_ERROR ),
  (Code: UVSTAGE_E_IMPROPER_LOCK                   ;   Str:'UVSTAGE_E_IMPROPER_LOCK';                   MappedException: E_INTERNAL_ERROR ),
  (Code: UVSTAGE_E_UNSUPPORTED_ALIGNMENT           ;   Str:'UVSTAGE_E_UNSUPPORTED_ALIGNMENT';           MappedException: E_INTERNAL_ERROR ),
  (Code: UVSTAGE_E_ALIGNMENT_NOT_ALLOWED           ;   Str:'UVSTAGE_E_ALIGNMENT_NOT_ALLOWED';           MappedException: E_INTERNAL_ERROR ),
  (Code: UVSTAGE_E_INVALID_POINT_TYPE              ;   Str:'UVSTAGE_E_INVALID_POINT_TYPE';              MappedException: E_INTERNAL_ERROR ),
  (Code: UVSTAGE_E_GET_CURR_STAGE_POS              ;   Str:'UVSTAGE_E_GET_CURR_STAGE_POS';              MappedException: E_INTERNAL_ERROR ),
  (Code: UVSTAGE_E_ALIGN_CALC_ERROR                ;   Str:'UVSTAGE_E_ALIGN_CALC_ERROR';                MappedException: E_INTERNAL_ERROR ),
  (Code: UVSTAGE_E_WAFER_TO_STAGE                  ;   Str:'UVSTAGE_E_WAFER_TO_STAGE';                  MappedException: E_INTERNAL_ERROR ),
  (Code: UVSTAGE_E_INVALID_POS                     ;   Str:'UVSTAGE_E_INVALID_POS';                     MappedException: E_INTERNAL_ERROR ),
  (Code: UVSTAGE_E_SET_GET_IMAGE_SHIFT             ;   Str:'UVSTAGE_E_SET_GET_IMAGE_SHIFT';             MappedException: E_INTERNAL_ERROR ),
  (Code: UVSTAGE_E_INVALID_POINT_STATE             ;   Str:'UVSTAGE_E_INVALID_POINT_STATE';             MappedException: E_INTERNAL_ERROR ),
  (Code: UVSTAGE_E_FAILED_TO_SET_ALIGNMENT_POINTS  ;   Str:'UVSTAGE_E_FAILED_TO_SET_ALIGNMENT_POINTS';  MappedException: E_INTERNAL_ERROR ),
  (Code: UVSTAGE_E_INVALID_DIE_INDEX               ;   Str:'UVSTAGE_E_INVALID_DIE_INDEX';               MappedException: E_INTERNAL_ERROR ),
  (Code: UVSTAGE_E_FOV                             ;   Str:'UVSTAGE_E_FOV';                             MappedException: E_INTERNAL_ERROR ),
  (Code: WAFERINFO_E_INVALID_INIT                  ;   Str:'WAFERINFO_E_INVALID_INIT';                  MappedException: E_INTERNAL_ERROR ),
  (Code: WAFERINFO_E_IMPROPER_LOCK                 ;   Str:'WAFERINFO_E_IMPROPER_LOCK';                 MappedException: E_INTERNAL_ERROR ),
  (Code: WAFERINFO_E_INVALID_INDEX                 ;   Str:'WAFERINFO_E_INVALID_INDEX';                 MappedException: E_INTERNAL_ERROR ),
  (Code: WAFERINFO_E_NO_DIE                        ;   Str:'WAFERINFO_E_NO_DIE';                        MappedException: E_INTERNAL_ERROR ),
  (Code: WAFERINFO_E_NOT_ON_DIE                    ;   Str:'WAFERINFO_E_NOT_ON_DIE';                    MappedException: E_INTERNAL_ERROR ),
  (Code: WAFERINFO_E_FAILED_TO_SET_ORIENT_MARK_TYPE;   Str:'WAFERINFO_E_FAILED_TO_SET_ORIENT_MARK_TYPE';MappedException: E_INTERNAL_ERROR ),
  (Code: STATUS_OK                                 ;   Str:'STATUS_OK';                                 MappedException: E_INTERNAL_ERROR ),
  (Code: IN_POSITION_OK                            ;   Str:'IN_POSITION_OK';                            MappedException: E_INTERNAL_ERROR ),
  (Code: IN_MOTION_OK                              ;   Str:'IN_MOTION_OK';                              MappedException: E_INTERNAL_ERROR ),
  (Code: AT_TRAVEL_LIMIT                           ;   Str:'AT_TRAVEL_LIMIT';                           MappedException: E_INTERNAL_ERROR ),
  (Code: POSITION_LIMIT_ERROR                      ;   Str:'POSITION_LIMIT_ERROR';                      MappedException: E_INTERNAL_ERROR ),
  (Code: CANNOT_MOVE_ERROR                         ;   Str:'CANNOT_MOVE_ERROR';                         MappedException: E_INTERNAL_ERROR ),
  (Code: CANNOT_EXECUTE_ERROR                      ;   Str:'CANNOT_EXECUTE_ERROR';                      MappedException: E_INTERNAL_ERROR ),
  (Code: INVALID_INPUT_ERROR                       ;   Str:'INVALID_INPUT_ERROR';                       MappedException: E_INTERNAL_ERROR ),    
  (Code: INVALID_AXIS_NUMBER_ERROR                 ;   Str:'INVALID_AXIS_NUMBER_ERROR';                 MappedException: E_INTERNAL_ERROR ),
  (Code: AXIS_OK                                   ;   Str:'AXIS_OK';                                   MappedException: E_INTERNAL_ERROR ),
  (Code: CLOSE_TO_TRAVEL_LIMIT                     ;   Str:'CLOSE_TO_TRAVEL_LIMIT';                     MappedException: E_INTERNAL_ERROR ),
  (Code: AXIS_OFF_POSITION_ERROR                   ;   Str:'AXIS_OFF_POSITION_ERROR';                   MappedException: E_INTERNAL_ERROR ),        
  (Code: AXIS_ERROR                                ;   Str:'AXIS_ERROR';                                MappedException: E_INTERNAL_ERROR ),         
  (Code: UNKNOWN_ERROR                             ;   Str:'UNKNOWN_ERROR';                             MappedException: E_INTERNAL_ERROR ),          
  (Code: AXIS_NOT_CREATED_ERROR                    ;   Str:'AXIS_NOT_CREATED_ERROR';                    MappedException: E_INTERNAL_ERROR ),
  (Code: IOBOARD_NOT_CREATED_ERROR                 ;   Str:'IOBOARD_NOT_CREATED_ERROR';                 MappedException: E_INTERNAL_ERROR ),
  (Code: CONTROLLER_ERROR                          ;   Str:'CONTROLLER_ERROR';                          MappedException: E_INTERNAL_ERROR ),
  (Code: ARM_ERROR                                 ;   Str:'ARM_ERROR ';                                MappedException: E_INTERNAL_ERROR ),
  (Code: ARM_OK                                    ;   Str:'ARM_OK';                                    MappedException: E_INTERNAL_ERROR ),
  (Code: ARM_LOCKED                                ;   Str:'ARM_LOCKED';                                MappedException: E_INTERNAL_ERROR ),
  (Code: ARM_ILLEGAL_MOVE                          ;   Str:'ARM_ILLEGAL_MOVE';                          MappedException: E_INTERNAL_ERROR ),
  (Code: ARM_NOT_INITIALIZED                       ;   Str:'ARM_NOT_INITIALIZED';                       MappedException: E_INTERNAL_ERROR ),
  (Code: ELEVATOR_ERROR                            ;   Str:'ELEVATOR_ERROR';                            MappedException: E_INTERNAL_ERROR ),
  (Code: ELEVATOR_OK                               ;   Str:'ELEVATOR_OK';                               MappedException: E_INTERNAL_ERROR ),
  (Code: ELEVATOR_LOCKED                           ;   Str:'ELEVATOR_LOCKED';                           MappedException: E_INTERNAL_ERROR ),
  (Code: ELEVATOR_ILLEGAL_MOVE                     ;   Str:'ELEVATOR_ILLEGAL_MOVE';                     MappedException: E_INTERNAL_ERROR ),
  (Code: ELEVATOR_NOT_INITIALIZED                  ;   Str:'ELEVATOR_NOT_INITIALIZED';                  MappedException: E_INTERNAL_ERROR ),
  (Code: ELEVATOR_NOT_CALIBRATED                   ;   Str:'ELEVATOR_NOT_CALIBRATED';                   MappedException: E_INTERNAL_ERROR ),
  (Code: STAGE_ERROR                               ;   Str:'STAGE_ERROR';                               MappedException: E_INTERNAL_ERROR ),
  (Code: STAGE_OK                                  ;   Str:'STAGE_OK';                                  MappedException: E_INTERNAL_ERROR ),
  (Code: STAGE_LOCKED                              ;   Str:'STAGE_LOCKED';                              MappedException: E_INTERNAL_ERROR ),
  (Code: STAGE_ILLEGAL_MOVE                        ;   Str:'STAGE_ILLEGAL_MOVE';                        MappedException: E_INTERNAL_ERROR ),
  (Code: STAGE_NOT_INITIALIZED                     ;   Str:'STAGE_NOT_INITIALIZED';                     MappedException: 0 ),
  (Code: STAGE_NOT_CALIBRATED                      ;   Str:'STAGE_NOT_CALIBRATED';                      MappedException: 0 ),
  (Code: E_ILLEGAL_REQUEST                         ;   Str:'E_ILLEGAL_REQUEST';                         MappedException: E_INTERNAL_ERROR ),
  (Code: S_SIMULATED                               ;   Str:'S_SIMULATED';                               MappedException: E_INTERNAL_ERROR ),
  (Code: E_CANNOT_GET_CRITSECT                     ;   Str:'E_CANNOT_GET_CRITSECT';                     MappedException: E_INTERNAL_ERROR ),
  (Code: E_AXIS_INTERFEROMETER_ERROR               ;   Str:'E_AXIS_INTERFEROMETER_ERROR';               MappedException: E_INTERNAL_ERROR ),
  (Code: S_GRABBED_OK                              ;   Str:'S_GRABBED_OK';                              MappedException: E_INTERNAL_ERROR ),
  (Code: E_GRABBER_ERROR                           ;   Str:'E_GRABBER_ERROR';                           MappedException: E_INTERNAL_ERROR ),
  (Code: S_RELEASED_OK                             ;   Str:'S_RELEASED_OK';                             MappedException: E_INTERNAL_ERROR ),
  (Code: S_RELEASING_OK                            ;   Str:'S_RELEASING_OK';                            MappedException: E_INTERNAL_ERROR ),
  (Code: E_GRABBER_LOCKED                          ;   Str:'E_GRABBER_LOCKED';                          MappedException: E_INTERNAL_ERROR ),
  (Code: S_GRABBER_OK                              ;   Str:'S_GRABBER_OK';                              MappedException: E_INTERNAL_ERROR ),
  (Code: S_GRABBING_OK                             ;   Str:'S_GRABBING_OK';                             MappedException: E_INTERNAL_ERROR ),
  (Code: AT_SOFT_LIMIT                             ;   Str:'AT_SOFT_LIMIT';                             MappedException: E_INTERNAL_ERROR ),
  (Code: AT_DAC_VOLT_LIMIT                         ;   Str:'AT_DAC_VOLT_LIMIT';                         MappedException: E_INTERNAL_ERROR ),
  (Code: AT_HOME_LIMIT                             ;   Str:'AT_HOME_LIMIT';                             MappedException: E_INTERNAL_ERROR ),
  (Code: BACKOUT_FROM_LIMIT                        ;   Str:'BACKOUT_FROM_LIMIT';                        MappedException: E_INTERNAL_ERROR ),
  (Code: STAGE_SERVO_MOTORS_OFF                    ;   Str:'STAGE_SERVO_MOTORS_OFF';                    MappedException: 0 ),
  (Code: STAGE_IN_EMULATION_MODE                   ;   Str:'STAGE_IN_EMULATION_MODE';                   MappedException: E_INTERNAL_ERROR ),
  (Code: STAGE_ERROR_IN_EMULATION_INFO_FILE        ;   Str:'STAGE_ERROR_IN_EMULATION_INFO_FILE';        MappedException: E_INTERNAL_ERROR ),
  (Code: STAGE_STATUS_FAILED                       ;   Str:'STAGE_STATUS_FAILED';                       MappedException: 0 ),
  (Code: STAGE_CONTROLLER_NOT_FOUND                ;   Str:'STAGE_CONTROLLER_NOT_FOUND';                MappedException: E_INTERNAL_ERROR ),
  (Code: STAGE_WRONG_MACRO_SET                     ;   Str:'STAGE_WRONG_MACRO_SET';                     MappedException: 0 ),
  (Code: STAGE_SOFT_LIMIT_TILTED                   ;   Str:'STAGE_SOFT_LIMIT_TILTED';                   MappedException: E_INTERNAL_ERROR ),
  (Code: IGUN_S_RASTER_CLIPPED                     ;   Str:'IGUN_S_RASTER_CLIPPED';                     MappedException: E_INTERNAL_ERROR ),
  (Code: IGUN_S_TIMED_ON_CANCELLED                 ;   Str:'IGUN_S_TIMED_ON_CANCELLED';                 MappedException: 0 ),
  (Code: IGUN_E_INIT                               ;   Str:'IGUN_E_INIT';                               MappedException: E_INITIALIZATION_ERROR ),
  (Code: IGUN_E_COM                                ;   Str:'IGUN_E_COM';                                MappedException: E_INTERNAL_ERROR ),
  (Code: IGUN_E_RANGE                              ;   Str:'IGUN_E_RANGE';                              MappedException: E_INTERNAL_ERROR ),
  (Code: IGUN_E_INVALID_CMD                        ;   Str:'IGUN_E_INVALID_CMD';                        MappedException: E_INTERNAL_ERROR ),
  (Code: IGUN_E_WAIT_NOT_DONE                      ;   Str:'IGUN_E_WAIT_NOT_DONE';                      MappedException: E_INTERNAL_ERROR ),
  (Code: IGUN_E_SUPPLY_TOL                         ;   Str:'IGUN_E_SUPPLY_TOL';                         MappedException: E_INTERNAL_ERROR ),
  (Code: WH_E_WHIO                                 ;   Str:'WH_E_WHIO';                                 MappedException: E_INTERNAL_ERROR ),
  (Code: WH_E_CARRIERSTATION                       ;   Str:'WH_E_CARRIERSTATION';                       MappedException: E_INTERNAL_ERROR ),
  (Code: WH_E_ILLEGALREQUEST                       ;   Str:'WH_E_ILLEGALREQUEST';                       MappedException: E_INTERNAL_ERROR ),
  (Code: WH_E_RTZ_ROBOT                            ;   Str:'WH_E_RTZ_ROBOT';                            MappedException: E_INTERNAL_ERROR ),
  (Code: WH_E_ME_PRESSURE                          ;   Str:'WH_E_ME_PRESSURE';                          MappedException: E_INTERNAL_ERROR ),
  (Code: WH_E_PREALIGNER                           ;   Str:'WH_E_PREALIGNER';                           MappedException: E_INTERNAL_ERROR ),
  (Code: WH_E_WHIO_VISO                            ;   Str:'WH_E_WHIO_VISO';                            MappedException: E_INTERNAL_ERROR ),
  (Code: WH_E_ME_DOOR_SEAL                         ;   Str:'WH_E_ME_DOOR_SEAL';                         MappedException: E_INTERNAL_ERROR ),
  (Code: WH_E_ME_WAFER_DOOR                        ;   Str:'WH_E_ME_WAFER_DOOR';                        MappedException: E_INTERNAL_ERROR ),
  (Code: WH_E_SYS_VACUUM                           ;   Str:'WH_E_SYS_VACUUM';                           MappedException: E_INTERNAL_ERROR ),
  (Code: WH_E_ELEVATOR                             ;   Str:'WH_E_ELEVATOR';                             MappedException: E_INTERNAL_ERROR ),
  (Code: WH_E_SVC_PRE_XFER_CHECK_FAILED            ;   Str:'WH_E_SVC_PRE_XFER_CHECK_FAILED';            MappedException: E_INTERNAL_ERROR ),
  (Code: WH_E_SVC_TASK_TIMEOUT                     ;   Str:'WH_E_SVC_TASK_TIMEOUT';                     MappedException: E_INTERNAL_ERROR ),
  (Code: WH_E_NOCASSETTE                           ;   Str:'WH_E_NOCASSETTE';                           MappedException: E_INTERNAL_ERROR ),
  (Code: WH_E_SVC_TASK_UNSUCCESFUL                 ;   Str:'WH_E_SVC_TASK_UNSUCCESFUL';                 MappedException: E_INTERNAL_ERROR ),
  (Code: WH_E_SVC_CANT_GET_TASK_LOCK               ;   Str:'WH_E_SVC_CANT_GET_TASK_LOCK';               MappedException: E_INTERNAL_ERROR ),
  (Code: WH_E_PAL_FAILED_PREP_FOR_ALIGN            ;   Str:'WH_E_PAL_FAILED_PREP_FOR_ALIGN';            MappedException: E_INTERNAL_ERROR ),
  (Code: WH_E_STATE_MACHINE_IN_ERROR_STATE         ;   Str:'WH_E_STATE_MACHINE_IN_ERROR_STATE';         MappedException: E_INTERNAL_ERROR ),
  (Code: WH_E_BUSY                                 ;   Str:'WH_E_BUSY';                                 MappedException: E_INTERNAL_ERROR ),
  (Code: WH_E_NO_TASK_TO_RESTART                   ;   Str:'WH_E_NO_TASK_TO_RESTART';                   MappedException: E_INTERNAL_ERROR ),
  (Code: WH_E_ABORTED                              ;   Str:'WH_E_ABORTED';                              MappedException: E_INTERNAL_ERROR ),
  (Code: EAAH_INVALID_ERROR_TABLE                  ;   Str:'EAAH_INVALID_ERROR_TABLE';                  MappedException: E_INTERNAL_ERROR ),
  (Code: EAAH_METAPORT_ALARM_DATABASE_ERROR        ;   Str:'EAAH_METAPORT_ALARM_DATABASE_ERROR';        MappedException: E_INTERNAL_ERROR ),
  (Code: EAAH_INVALID_PHI_ALARM_ERROR              ;   Str:'EAAH_INVALID_PHI_ALARM_ERROR';              MappedException: E_INTERNAL_ERROR ),
  (Code: EAAH_ALARM_CLEARED_NOT_ACTIVE_ERROR       ;   Str:'EAAH_ALARM_CLEARED_NOT_ACTIVE_ERROR';       MappedException: E_INTERNAL_ERROR ),
  (Code: EAAH_LIST_ACCESS_ERROR                    ;   Str:'EAAH_LIST_ACCESS_ERROR';                    MappedException: E_INTERNAL_ERROR ),
  (Code: EAAH_DUPLICATE_ERROR                      ;   Str:'EAAH_DUPLICATE_ERROR';                      MappedException: E_INTERNAL_ERROR ),
  (Code: EAAH_EVENT_NOTIFY_FAIL                    ;   Str:'EAAH_EVENT_NOTIFY_FAIL';                    MappedException: E_INTERNAL_ERROR ),
  (Code: UI_E_GENERAL                              ;   Str:'UI_E_GENERAL';                              MappedException: E_INTERNAL_ERROR ),
  (Code: UI_E_ALARMS_DETECTED_AT_STARTUP           ;   Str:'UI_E_ALARMS_DETECTED_AT_STARTUP';           MappedException: 0 ),
  (Code: UI_E_WAFER_POSITION_INCORRECT_AT_STARTUP  ;   Str:'UI_E_WAFER_POSITION_INCORRECT_AT_STARTUP';  MappedException: 0 ),
  (Code: UI_E_RECIPE_ALREADY_RUNNING               ;   Str:'UI_E_RECIPE_ALREADY_RUNNING';               MappedException: E_INTERNAL_ERROR ),
  (Code: UI_E_RECIPE_INVALID_NAME                  ;   Str:'UI_E_RECIPE_INVALID_NAME';                  MappedException: E_INTERNAL_ERROR ),
  (Code: UI_E_INVALID_ALARM_DEFINITION             ;   Str:'UI_E_INVALID_ALARM_DEFINITION';             MappedException: E_INTERNAL_ERROR ),
  (Code: XR_E_INVALID_PARAMETER_RANGE              ;   Str:'XR_E_INVALID_PARAMETER_RANGE';              MappedException: E_INTERNAL_ERROR ),
  (Code: XR_E_UNIT_CANNOT_COMPLY                   ;   Str:'XR_E_UNIT_CANNOT_COMPLY';                   MappedException: E_INTERNAL_ERROR ),
  (Code: XR_E_UNKNOWN_UNIT_RESPONSE                ;   Str:'XR_E_UNKNOWN_UNIT_RESPONSE';                MappedException: E_INTERNAL_ERROR ),
  (Code: XR_E_UNABLE_TO_SEND_CMD                   ;   Str:'XR_E_UNABLE_TO_SEND_CMD';                   MappedException: E_INTERNAL_ERROR ),
  (Code: XR_E_FORMATTING_CMD_PACKET                ;   Str:'XR_E_FORMATTING_CMD_PACKET';                MappedException: E_INTERNAL_ERROR ),
  (Code: XR_E_ATTEMPT_TO_EXCEED_POWER_LIMIT        ;   Str:'XR_E_ATTEMPT_TO_EXCEED_POWER_LIMIT';        MappedException: E_INTERNAL_ERROR ),
  (Code: XR_E_INTERLOCKS_NOT_MET                   ;   Str:'XR_E_INTERLOCKS_NOT_MET';                   MappedException: E_INTERNAL_ERROR ),
  (Code: XR_E_INVALID_UNIT_RESPONSE                ;   Str:'XR_E_INVALID_UNIT_RESPONSE';                MappedException: E_INTERNAL_ERROR ),
  (Code: XR_E_INVALID_CMD                          ;   Str:'XR_E_INVALID_CMD';                          MappedException: E_INTERNAL_ERROR ),
  (Code: DR_E_NO_SILICON_DATA                      ;   Str:'DR_E_NO_SILICON_DATA';                      MappedException: E_INTERNAL_ERROR ),
  (Code: DR_E_NO_NITROGEN_DATA                     ;   Str:'DR_E_NO_NITROGEN_DATA';                     MappedException: E_INTERNAL_ERROR ),
  (Code: DR_E_ERROR_FROM_LOADSPE                   ;   Str:'DR_E_ERROR_FROM_LOADSPE';                   MappedException: E_INTERNAL_ERROR ),
  (Code: DR_E_WARNING_FROM_LOADSPE                 ;   Str:'DR_E_WARNING_FROM_LOADSPE';                 MappedException: E_INTERNAL_ERROR ),
  (Code: E_DEVICE_NOT_INITIALIZED                  ;   Str:'E_DEVICE_NOT_INITIALIZED';                  MappedException: E_INITIALIZATION_ERROR ),
  (Code: E_COMMAND_NOT_SUPPORTED                   ;   Str:'E_COMMAND_NOT_SUPPORTED';                   MappedException: E_INTERNAL_ERROR ),
  (Code: E_COMMAND_NOT_ALLOWED                     ;   Str:'E_COMMAND_NOT_ALLOWED';                     MappedException: E_INTERNAL_ERROR ),
  (Code: E_INVALID_PARAMETER_RANGE                 ;   Str:'E_INVALID_PARAMETER_RANGE';                 MappedException: E_INTERNAL_ERROR ),
  (Code: E_HARDWARE_OBJECT_ERROR                   ;   Str:'E_HARDWARE_OBJECT_ERROR';                   MappedException: E_INTERNAL_ERROR ),
  (Code: E_MIN_MAX_LIMITS_EXCEEDED                 ;   Str:'E_MIN_MAX_LIMITS_EXCEEDED';                 MappedException: E_INTERNAL_ERROR ),
  (Code: E_NO_DEVICE_OBJECT                        ;   Str:'E_NO_DEVICE_OBJECT';                        MappedException: E_INTERNAL_ERROR ),
  (Code: E_COULD_NOT_FIND_DEVICE                   ;   Str:'E_COULD_NOT_FIND_DEVICE';                   MappedException: 0 ),
  (Code: E_NO_DATA                                 ;   Str:'E_NO_DATA';                                 MappedException: E_INTERNAL_ERROR ),
  (Code: E_ANALYZER_REPORT_DATAACQ                 ;   Str:'E_ANALYZER_REPORT_DATAACQ';                 MappedException: 0 ),
  (Code: E_DATAACQ_OVERFLOW                        ;   Str:'E_DATAACQ_OVERFLOW';                        MappedException: E_INTERNAL_ERROR ),
  (Code: E_DATAACQ_DATAPOINT_MISMATCH              ;   Str:'E_DATAACQ_DATAPOINT_MISMATCH';              MappedException: E_INTERNAL_ERROR ),
  (Code: E_DATAACQ_OUTOFSYNC                       ;   Str:'E_DATAACQ_OUTOFSYNC';                       MappedException: E_INTERNAL_ERROR ),
  (Code: E_DEVICE_RESPONSE_EXCEEDS_LIMITS          ;   Str:'E_DEVICE_RESPONSE_EXCEEDS_LIMITS';          MappedException: E_INTERNAL_ERROR ),
  (Code: E_DEVICE_RESPONSE_CHKSUM_ERROR            ;   Str:'E_DEVICE_RESPONSE_CHKSUM_ERROR';            MappedException: E_INTERNAL_ERROR ),
  (Code: E_DAC_OUT_OF_RANGE                        ;   Str:'E_DAC_OUT_OF_RANGE';                        MappedException: E_INTERNAL_ERROR ),

  (Code: E_SERIAL_DEVICE_OPEN_ERROR                ;   Str:'E_SERIAL_DEVICE_OPEN_ERROR';                MappedException: E_INTERNAL_ERROR ),
  (Code: E_SERIAL_DEVICE_WRITE_ERROR               ;   Str:'E_SERIAL_DEVICE_WRITE_ERROR';               MappedException: E_INTERNAL_ERROR ),
  (Code: E_SERIAL_DEVICE_READ_ERROR                ;   Str:'E_SERIAL_DEVICE_READ_ERROR';                MappedException: E_INTERNAL_ERROR ),
  (Code: E_SIM_DEVICE_OPEN_ERROR                   ;   Str:'E_SIM_DEVICE_OPEN_ERROR';                   MappedException: E_INTERNAL_ERROR ),
  (Code: E_SIM_DEVICE_WRITE_ERROR                  ;   Str:'E_SIM_DEVICE_WRITE_ERROR';                  MappedException: E_INTERNAL_ERROR ),
  (Code: E_SIM_DEVICE_READ_ERROR                   ;   Str:'E_SIM_DEVICE_READ_ERROR';                   MappedException: E_INTERNAL_ERROR ),
  (Code: E_USB_DEVICE_OPEN_ERROR                   ;   Str:'E_USB_DEVICE_OPEN_ERROR';                   MappedException: E_INTERNAL_ERROR ),
  (Code: E_USB_DEVICE_WRITE_ERROR                  ;   Str:'E_USB_DEVICE_WRITE_ERROR';                  MappedException: E_INTERNAL_ERROR ),
  (Code: E_USB_DEVICE_READ_ERROR                   ;   Str:'E_USB_DEVICE_READ_ERROR';                   MappedException: E_INTERNAL_ERROR ),
  (Code: E_BULK_THREAD_ERROR                       ;   Str:'E_BULK_THREAD_ERROR';                       MappedException: E_INTERNAL_ERROR ),
  (Code: E_BULK_READ_ERROR                         ;   Str:'E_BULK_READ_ERROR';                         MappedException: E_INTERNAL_ERROR ),
  (Code: E_USB_STREAM_THREAD_ERROR                 ;   Str:'E_USB_STREAM_THREAD_ERROR';                 MappedException: E_INTERNAL_ERROR ),
  (Code: E_USB_STREAM_READ_ERROR                   ;   Str:'E_USB_STREAM_READ_ERROR';                   MappedException: E_INTERNAL_ERROR ),
  (Code: E_DEVICE_BAD_RESPONSE_ERROR               ;   Str:'E_DEVICE_BAD_RESPONSE_ERROR';               MappedException: E_INTERNAL_ERROR ),

  (Code: ACQPROCESSCTRL_E_UNABLE_TO_START_TASK     ;   Str:'ACQPROCESSCTRL_E_UNABLE_TO_START_TASK';     MappedException: E_INTERNAL_ERROR ),
  (Code: ACQPROCESSCTRL_E_ACQ_NOT_VALID            ;   Str:'ACQPROCESSCTRL_E_ACQ_NOT_VALID';            MappedException: 0 ),
  (Code: ACQPROCESSCTRL_E_ACQ_ABORTED              ;   Str:'ACQPROCESSCTRL_E_ACQ_ABORTED';              MappedException: 0 ),
  (Code: ACQPROCESSCTRL_E_UNABLE_TO_RESTART_TASK   ;   Str:'ACQPROCESSCTRL_E_UNABLE_TO_RESTART_TASK';   MappedException: 0 ),
  (Code: ACQPROCESSCTRL_E_UNABLE_TO_STOP_TASK      ;   Str:'ACQPROCESSCTRL_E_UNABLE_TO_STOP_TASK';      MappedException: 0 ),
  (Code: ACQPROCESSCTRL_E_UNABLE_TO_EXTEND_TASK    ;   Str:'ACQPROCESSCTRL_E_UNABLE_TO_EXTEND_TASK';    MappedException: 0 ),
  (Code: ACQPROCESSCTRL_E_UNABLE_TO_VALIDATE_TASK  ;   Str:'ACQPROCESSCTRL_E_UNABLE_TO_VALIDATE_TASK';  MappedException: 0 ),
  (Code: ACQPROCESSCTRL_E_ACQ_ERROR                ;   Str:'ACQPROCESSCTRL_E_ACQ_ERROR';                MappedException: 0 ),
  (Code: ACQPROCESSCTRL_E_INVALID_ARG              ;   Str:'ACQPROCESSCTRL_E_INVALID_ARG';              MappedException: 0 ),
  (Code: ACQPROCESSCTRL_E_ACQ_STOPPED              ;   Str:'ACQPROCESSCTRL_E_ACQ_STOPPED';              MappedException: 0 ),
  (Code: ACQPROCESSCTRL_E_ACQ_RESTARTED            ;   Str:'ACQPROCESSCTRL_E_ACQ_RESTARTED';            MappedException: 0 ),
  (Code: ACQPROCESSCTRL_E_SCAN_PATTERN_CLIPPING_ERROR; Str:'ACQPROCESSCTRL_E_SCAN_PATTERN_CLIPPING_ERROR'; MappedException: 0 ),
  (Code: DAE_E_UNABLE_TO_START_TASK                ;   Str:'DAE_E_UNABLE_TO_START_TASK';                MappedException: 0 ),
  (Code: ACQCTRL_E_ACQ_ABORTED                     ;   Str:'ACQCTRL_E_ACQ_ABORTED';                     MappedException: 0 ),
  (Code: ACQ_E_EXTERNAL_ABORT                      ;   Str:'ACQ_E_EXTERNAL_ABORT';                      MappedException: 0 ),
  (Code: ACQ_E_INTERNAL_ERROR                      ;   Str:'ACQ_E_INTERNAL_ERROR';                      MappedException: E_INTERNAL_ERROR ),
  (Code: ACQCTRL_E_TIMEOUT                         ;   Str:'ACQCTRL_E_TIMEOUT';                         MappedException: E_INTERNAL_ERROR ),
  (Code: ACQCTRL_E_BUSY                            ;   Str:'ACQCTRL_E_BUSY';                            MappedException: 0 ),
  (Code: ACQCTRL_E_NO_TASK_TO_RESTART              ;   Str:'ACQCTRL_E_NO_TASK_TO_RESTART';              MappedException: 0 ),
  (Code: ACQCTRL_E_UNINITIALIZE_EGUN_XRAY          ;   Str:'ACQCTRL_E_UNINITIALIZE_EGUN_XRAY';          MappedException: 0 ),
  (Code: ACQCTRL_E_UNINITIALIZE_BIAS_BOX           ;   Str:'ACQCTRL_E_UNINITIALIZE_BIAS_BOX';           MappedException: 0 ),
  (Code: ACQCTRL_E_UNINITIALIZE_GAUZE_LENS         ;   Str:'ACQCTRL_E_UNINITIALIZE_GAUZE_LENS';         MappedException: 0 ),
  (Code: ACQCTRL_E_UNINITIALIZE_SCA_MULTIPLIER     ;   Str:'ACQCTRL_E_UNINITIALIZE_SCA_MULTIPLIER';     MappedException: 0 ),
  (Code: ACQCTRL_E_UNINITIALIZE_SHUTTER_BIAS       ;   Str:'ACQCTRL_E_UNINITIALIZE_SHUTTER_BIAS';       MappedException: 0 ),
  (Code: ACQCTRL_E_UNINITIALIZE_EGUN_NEUT          ;   Str:'ACQCTRL_E_UNINITIALIZE_EGUN_NEUT';          MappedException: 0 ),
  (Code: ACQCTRL_E_UNINITIALIZE_SCA                ;   Str:'ACQCTRL_E_UNINITIALIZE_SCA';                MappedException: 0 ),
  (Code: ACQCTRL_E_INITIALIZE_HARDWARE             ;   Str:'ACQCTRL_E_INITIALIZE_HARDWARE';             MappedException: 0 ),
  (Code: ACQCTRL_E_NO_TASK_TO_STOP                 ;   Str:'ACQCTRL_E_NO_TASK_TO_STOP';                 MappedException: 0 ),
  (Code: ACQCTRL_E_MOTION_ERROR                    ;   Str:'ACQCTRL_E_MOTION_ERROR';                    MappedException: 0 ),
  (Code: ACQCTRL_E_TIMED_SPUTTERING_ERROR          ;   Str:'ACQCTRL_E_TIMED_SPUTTERING_ERROR';          MappedException: 0 ),
  (Code: ACQCTRL_E_ACQ_ERROR                       ;   Str:'ACQCTRL_E_ACQ_ERROR';                       MappedException: 0 ),
  (Code: ACQCTRL_E_UNINITIALIZE_SPUTTER_SHUTTER    ;   Str:'ACQCTRL_E_UNINITIALIZE_SPUTTER_SHUTTER';    MappedException: 0 ),
  (Code: ACQCTRL_E_INVALID_ARG                     ;   Str:'ACQCTRL_E_INVALID_ARG';                     MappedException: 0 ),
  (Code: ACQCTRL_E_IMAGE_REGISTRATION              ;   Str:'ACQCTRL_E_IMAGE_REGISTRATION';              MappedException: 0 ),
  (Code: ACQCTRL_E_ACQ_STOPPED                     ;   Str:'ACQCTRL_E_ACQ_STOPPED';                     MappedException: 0 ),
  (Code: ACQCTRL_E_ACQ_RESTARTED                   ;   Str:'ACQCTRL_E_ACQ_RESTARTED';                   MappedException: 0 ),
  (Code: ACQCTRL_E_UNINITIALIZE_EGUN               ;   Str:'ACQCTRL_E_UNINITIALIZE_EGUN';               MappedException: 0 ),

  (Code: ENEUT_E_COM                               ;   Str:'ENEUT_E_COM';                               MappedException: E_INTERNAL_ERROR ),
  (Code: ENEUT_E_INIT                              ;   Str:'ENEUT_E_INIT';                              MappedException: E_INITIALIZATION_ERROR ),
  (Code: ENEUT_E_PARAM_RANGE                       ;   Str:'ENEUT_E_PARAM_RANGE';                       MappedException: E_INTERNAL_ERROR ),
  (Code: ENEUT_E_EC_STATUS_OUT_TOLERANCE           ;   Str:'ENEUT_E_EC_STATUS_OUT_TOLERANCE';           MappedException: E_INTERNAL_ERROR ),
  (Code: ENEUT_E_EC_STATUS_UNKOWN                  ;   Str:'ENEUT_E_EC_STATUS_UNKOWN';                  MappedException: E_INTERNAL_ERROR ),
  (Code: ENEUT_E_EC_STATUS_TIMEOUT                 ;   Str:'ENEUT_E_EC_STATUS_TIMEOUT';                 MappedException: 0 ),
  (Code: ENEUT_E_EC_STATUS_BLANKING                ;   Str:'ENEUT_E_EC_STATUS_BLANKING';                MappedException: 0 ),
  (Code: ENEUT_E_FIL_STATUS_OUT_TOLERANCE          ;   Str:'ENEUT_E_FIL_STATUS_OUT_TOLERANCE';          MappedException: 0 ),
  (Code: ENEUT_E_FIL_STATUS_UNKOWN                 ;   Str:'ENEUT_E_FIL_STATUS_UNKOWN';                 MappedException: 0 ),
  (Code: ENEUT_E_FIL_STATUS_TIMEOUT                ;   Str:'ENEUT_E_FIL_STATUS_TIMEOUT';                MappedException: 0 ),
  (Code: ENEUT_E_RESPONSE_UNKNOWN                  ;   Str:'ENEUT_E_RESPONSE_UNKNOWN';                  MappedException: 0 ),

  (Code: VACCTRL_E_ABORTED                         ;   Str:'VACCTRL_E_ABORTED';                         MappedException: 0 ),
  (Code: VACCTRL_E_BUSY                            ;   Str:'ACQCTRL_E_BUSY';                         MappedException: 0 ),

  (Code: MOTOR_E_OUTSIDE_AXIS_LIMIT                ;   Str:'MOTOR_E_OUTSIDE_AXIS_LIMIT';                MappedException: 0 ),
  (Code: MOTOR_E_CANNOT_SWITCH_MUX                 ;   Str:'MOTOR_E_CANNOT_SWITCH_MUX';                 MappedException: E_INTERNAL_ERROR ),
  (Code: MOTOR_E_TOUCH_SENSOR                      ;   Str:'MOTOR_E_TOUCH_SENSOR';                      MappedException: 0 ),
  (Code: MOTOR_E_ZALAR_SPEED_TOO_FAST              ;   Str:'MOTOR_E_ZALAR_SPEED_TOO_FAST';              MappedException: 0 ),
  (Code: MOTOR_E_ZALAR_TOO_FAR_OFF_AXIS            ;   Str:'MOTOR_E_ZALAR_TOO_FAR_OFF_AXIS';            MappedException: 0 ),
  (Code: MOTOR_E_ZALAR_OUTISE_LEGAL_ENVELOPE       ;   Str:'MOTOR_E_ZALAR_OUTISE_LEGAL_ENVELOPE';       MappedException: 0 ),
  (Code: MOTOR_E_TILT_SHOULD_BE_FLAT               ;   Str:'MOTOR_E_TILT_SHOULD_BE_FLAT';               MappedException: 0 ),
  (Code: MOTOR_E_MOTION_ERROR                      ;   Str:'MOTOR_E_MOTION_ERROR';                      MappedException: 0 ),
  (Code: MOTOR_E_ROTATE_TOO_FAR_OFF_AXIS           ;   Str:'MOTOR_E_ROTATE_TOO_FAR_OFF_AXIS';           MappedException: 0 ),
  (Code: MOTOR_E_OUT_OF_MEMORY                     ;   Str:'MOTOR_E_OUT_OF_MEMORY';                     MappedException: E_INTERNAL_ERROR ),
  (Code: MOTOR_E_NEED_INITIALIZATION               ;   Str:'MOTOR_E_NEED_INITIALIZATION';               MappedException: 0 ),
  (Code: MOTOR_E_MONOCHROMATOR_DISABLED            ;   Str:'MOTOR_E_MONOCHROMATOR_DISABLED';            MappedException: 0 ),
  (Code: MOTOR_E_MOTOR_DISABLED                    ;   Str:'MOTOR_E_MOTOR_DISABLED';                    MappedException: 0 ),
  (Code: MOTOR_E_NO_MOTOR_MOVE_AT_EXTREME_TILT     ;   Str:'MOTOR_E_NO_MOTOR_MOVE_AT_EXTREME_TILT';     MappedException: 0 ),
  (Code: MOTOR_E_CANNOT_MOVE_TO_TARGET_POS         ;   Str:'MOTOR_E_CANNOT_MOVE_TO_TARGET_POS';         MappedException: 0 ),

  (Code: SAMPLE_HANDLING_E_TIMEOUT                 ;   Str:'SAMPLE_HANDLING_E_TIMEOUT';                 MappedException: E_INTERNAL_ERROR ),
  (Code: SAMPLE_HANDLING_E_ABORTED                 ;   Str:'SAMPLE_HANDLING_E_ABORTED';                 MappedException: 0 ),
  (Code: SAMPLE_HANDLING_E_BUSY                    ;   Str:'SAMPLE_HANDLING_E_BUSY';                    MappedException: 0 ),
  (Code: SAMPLE_HANDLING_E_XferFromPrepToOccupiedIntroWithSwap ;   Str:'SAMPLE_HANDLING_E_XferFromPrepToOccupiedIntroWithSwap'; MappedException: 0 ),
  (Code: SAMPLE_HANDLING_E_XferToPrepWithSwap      ;   Str:'SAMPLE_HANDLING_E_XferToPrepWithSwap';      MappedException: 0 ),
  (Code: SAMPLE_HANDLING_E_XferAcrossOccupiedIntro ;   Str:'SAMPLE_HANDLING_E_XferAcrossOccupiedIntro'; MappedException: 0 ),
  (Code: SAMPLE_HANDLING_E_DestinationIsOccupiedWithNoParking ;   Str:'SAMPLE_HANDLING_E_DestinationIsOccupiedWithNoParking'; MappedException: 0 ),
  (Code: SAMPLE_HANDLING_E_200mmStageIsOccupied    ;   Str:'SAMPLE_HANDLING_E_200mmStageIsOccupied';    MappedException: 0 ),
  (Code: SAMPLE_HANDLING_E_SourceAndDestinationAreSame ;   Str:'SAMPLE_HANDLING_E_SourceAndDestinationAreSame'; MappedException: 0 ),
  (Code: SAMPLE_HANDLING_E_PlatenInArm             ;   Str:'SAMPLE_HANDLING_E_PlatenInArm';             MappedException: 0 ),
  (Code: SAMPLE_HANDLING_E_NoPlatenInSource        ;   Str:'SAMPLE_HANDLING_E_NoPlatenInSource';        MappedException: 0 ),
  (Code: SAMPLE_HANDLING_E_V13IsOpen               ;   Str:'SAMPLE_HANDLING_E_V13IsOpen';               MappedException: 0 ),
  (Code: SAMPLE_HANDLING_E_XferToPrepAndPrepIsOccupied ; Str:'SAMPLE_HANDLING_E_XferToPrepAndPrepIsOccupied'; MappedException: 0 ),
  (Code: SAMPLE_HANDLING_E_InsufficientLocationsToXfer ; Str:'SAMPLE_HANDLING_E_InsufficientLocationsToXfer'; MappedException: 0 ),
  (Code: SAMPLE_HANDLING_E_MotorError              ;   Str:'SAMPLE_HANDLING_E_MotorError';              MappedException: 0 ),
  (Code: SAMPLE_HANDLING_E_VacuumError             ;   Str:'SAMPLE_HANDLING_E_VacuumError';             MappedException: 0 ),
  (Code: SAMPLE_HANDLING_E_TASK_IS_INTERRUPTED     ;   Str:'SAMPLE_HANDLING_E_TASK_IS_INTERRUPTED';     MappedException: 0 ),
  (Code: SAMPLE_HANDLING_E_IG_SETMODE_FAILED       ;   Str:'SAMPLE_HANDLING_E_IG_SETMODE_FAILED';       MappedException: 0 ),
  (Code: SAMPLE_HANDLING_E_AUX_TRANSFER_PROBE_INSERTED ;   Str:'SAMPLE_HANDLING_E_AUX_TRANSFER_PROBE_INSERTED'; MappedException: 0 ),

  (Code: PLATEN_TRANSFER_E_TIMEOUT                 ;   Str:'PLATEN_TRANSFER_E_TIMEOUT';                MappedException: E_INTERNAL_ERROR ),
  (Code: PLATEN_TRANSFER_E_ABORTED                 ;   Str:'PLATEN_TRANSFER_E_ABORTED';                MappedException: 0 ),
  (Code: PLATEN_TRANSFER_E_BUSY                    ;   Str:'PLATEN_TRANSFER_E_BUSY';                   MappedException: 0 ),

  (Code:  IMAGEDATA_E_NOSOCK                       ;   Str:'IMAGEDATA_E_NOSOCK';                       MappedException: 0 ),
  (Code:  IMAGEDATA_E_TIMEOUT                      ;   Str:'IMAGEDATA_E_TIMEOUT';                      MappedException: 0 ),
  (Code:  IMAGEDATA_E_BADDATA                      ;   Str:'IMAGEDATA_E_BADDATA';                      MappedException: 0 ),
  (Code:  IMAGEDATA_E_SIZE                         ;   Str:'IMAGEDATA_E_SIZE';                         MappedException: 0 ),
  (Code:  IMAGEDATA_E_MEMMAP                       ;   Str:'IMAGEDATA_E_MEMMAP';                       MappedException: 0 ),
  (Code:  IMAGEDATA_E_INIT_FAILED                  ;   Str:'IMAGEDATA_E_INIT_FAILED';                  MappedException: 0 ),

  (Code:  SCANPATTERN_E_SXIAREA                    ;   Str:'SCANPATTERN_E_SXIAREA';                    MappedException: 0 ),
  (Code:  SCANPATTERN_E_HPAREA                     ;   Str:'SCANPATTERN_E_HPAREA';                     MappedException: 0 ),
  (Code:  SCANPATTERN_E_SCANSIZE                   ;   Str:'SCANPATTERN_E_SCANSIZE';                   MappedException: 0 ),
  (Code:  SCANPATTERN_E_MIXEDAREAS                 ;   Str:'SCANPATTERN_E_MIXEDAREAS';                 MappedException: 0 ),
  (Code:  SCANPATTERN_E_MAXNUMAREAS                ;   Str:'SCANPATTERN_E_MAXNUMAREAS';                MappedException: 0 ),
  (Code:  SCANPATTERN_E_SCANCLIPPING               ;   Str:'SCANPATTERN_E_SCANCLIPPING';               MappedException: 0 ),
  (Code:  SCANPATTERN_E_DACRESOLUTION              ;   Str:'SCANPATTERN_E_DACRESOLUTION';              MappedException: 0 ),

  (Code:  FRAMEGRABBER_E_HALT                      ;   Str:'FRAMEGRABBER_E_HALT';                      MappedException: 0 ),
  (Code:  FRAMEGRABBER_E_SWITCH_CHANNEL            ;   Str:'FRAMEGRABBER_E_SWITCH_CHANNEL';            MappedException: 0 ),
  (Code:  FRAMEGRABBER_E_GRAB                      ;   Str:'FRAMEGRABBER_E_GRAB';                      MappedException: 0 ),
  (Code:  FRAMEGRABBER_E_INITIALIZE                ;   Str:'FRAMEGRABBER_E_INITIALIZE';                MappedException: 0 ),
  (Code:  FRAMEGRABBER_E_COPY_TO_CLIPBOARD         ;   Str:'FRAMEGRABBER_E_COPY_TO_CLIPBOARD';         MappedException: 0 ),
  (Code:  FRAMEGRABBER_E_SAVE_TO_FILE              ;   Str:'FRAMEGRABBER_E_SAVE_TO_FILE';              MappedException: 0 ),
  (Code:  FRAMEGRABBER_E_CLIP_IMAGE                ;   Str:'FRAMEGRABBER_E_CLIP_IMAGE';                MappedException: 0 ),
  (Code:  FRAMEGRABBER_E_LOAD                      ;   Str:'FRAMEGRABBER_E_LOAD';                      MappedException: 0 ),
  (Code:  FRAMEGRABBER_E_FILE_ALREAY_EXIST         ;   Str:'FRAMEGRABBER_E_FILE_ALREAY_EXIST';         MappedException: 0 ),
  (Code:  FRAMEGRABBER_E_FILE_NOT_EXIST            ;   Str:'FRAMEGRABBER_E_FILE_NOT_EXIST';            MappedException: 0 ),
  (Code:  FRAMEGRABBER_E_MISSING_CAMERA            ;   Str:'FRAMEGRABBER_E_MISSING_CAMERA';            MappedException: 0 ),

  (Code:  SAVING_DATA_E_BUSY                       ;   Str:'SAVING_DATA_E_BUSY';                       MappedException: 0 ),
  (Code:  SAVING_DATA_E_ABORTED                    ;   Str:'SAVING_DATA_E_ABORTED';                    MappedException: 0 ),

  (Code:  BAKE_PROCESS_CONTROL_E_BUSY              ;           Str:'BAKE_PROCESS_CONTROL_E_BUSY';                          MappedException: 0 ),
  (Code:  BAKE_PROCESS_CONTROL_THERMOCOUPLE_ABORT_TEMPERATURE; Str:'BAKE_PROCESS_CONTROL_THERMOCOUPLE_ABORT_TEMPERATURE';  MappedException: 0 ),
  (Code:  BAKE_PROCESS_CONTROL_E_BAKE_NOT_PREPARED ;           Str:'BAKE_PROCESS_CONTROL_E_BAKE_NOT_PREPARED';             MappedException: 0 ),
  (Code:  BAKE_PROCESS_CONTROL_E_REACH_MAX_ION_PUMP_RESTART ;  Str:'BAKE_PROCESS_CONTROL_E_REACH_MAX_ION_PUMP_RESTART';    MappedException: 0 ),
  (Code:  BAKE_PROCESS_CONTROL_E_NO_TASK_TO_RESUME ;           Str:'BAKE_PROCESS_CONTROL_E_NO_TASK_TO_RESUME';             MappedException: 0 ),
  (Code:  BAKE_PROCESS_CONTROL_E_CANNOT_CLOSE_UPPER_BYPASS_VALVE ; Str:'BAKE_PROCESS_CONTROL_E_CANNOT_CLOSE_UPPER_BYPASS_VALVE'; MappedException: 0 ),

  (Code:  MPC_E_ABORTED                            ;  Str:'MPC_E_ABORTED';                             MappedException: 0 ),

  (Code:  VAC_PROCESS_CONTROL_E_BUSY                    ;  Str:'VAC_PROCESS_CONTROL_E_BUSY';                 MappedException: 0 ),
  (Code:  VAC_PROCESS_CONTROL_E_ABORTED                 ;  Str:'VAC_PROCESS_CONTROL_E_ABORTED';              MappedException: 0 ),
  (Code:  VAC_PROCESS_CONTROL_E_INPROPER_TURBO_SPEED    ;  Str:'VAC_PROCESS_CONTROL_E_INPROPER_TURBO_SPEED'; MappedException: 0 ),
  (Code:  VAC_PROCESS_CONTROL_E_ION_PUMP_OFF_NOT_CONFIRMED         ;  Str:'VAC_PROCESS_CONTROL_E_ION_PUMP_OFF_NOT_CONFIRMED'; MappedException: 0 ),
  (Code:  VAC_PROCESS_CONTROL_E_ION_PUMP_START_VOLT_NOT_REACHED    ;  Str:'VAC_PROCESS_CONTROL_E_ION_PUMP_START_VOLT_NOT_REACHED'; MappedException: 0 ),
  (Code:  VAC_PROCESS_CONTROL_E_ION_PUMP_STEADY_NOT_REACHED        ;  Str:'VAC_PROCESS_CONTROL_E_ION_PUMP_STEADY_NOT_REACHED'; MappedException: 0 ),
  (Code:  VAC_PROCESS_CONTROL_E_DIFF_PUMP_IS_ON                    ;  Str:'VAC_PROCESS_CONTROL_E_DIFF_PUMP_IS_ON'; MappedException: 0 ),
  (Code:  VAC_PROCESS_CONTROL_E_NO_AUX_CHAMBER                     ;  Str:'VAC_PROCESS_CONTROL_E_NO_AUX_CHAMBER'; MappedException: 0 ),
  (Code:  VAC_PROCESS_CONTROL_E_AUX_PROBE_NOT_RETRACTED            ;  Str:'VAC_PROCESS_CONTROL_E_AUX_PROBE_NOT_RETRACTED'; MappedException: 0 ),
  (Code:  VAC_PROCESS_CONTROL_E_AUX_PRESSURE_TOO_HIGH              ;  Str:'VAC_PROCESS_CONTROL_E_AUX_PRESSURE_TOO_HIGH'; MappedException: 0 ),
  (Code:  VAC_PROCESS_CONTROL_E_AUX_PRESSURE_NOT_APPROP            ;  Str:'VAC_PROCESS_CONTROL_E_AUX_PRESSURE_NOT_APPROP'; MappedException: 0 ),
  (Code:  VAC_PROCESS_CONTROL_E_V13_STATUS_NOT_CONFIRMED           ;  Str:'VAC_PROCESS_CONTROL_E_V13_STATUS_NOT_CONFIRMED'; MappedException: 0 ),
  (Code:  VAC_PROCESS_CONTROL_E_V13_NOT_WORKING                    ;  Str:'VAC_PROCESS_CONTROL_E_V13_NOT_WORKING'; MappedException: 0 ),
  (Code:  VAC_PROCESS_CONTROL_E_INTRO_DOOR_NOT_WORKING             ;  Str:'VAC_PROCESS_CONTROL_E_INTRO_DOOR_NOT_WORKING'; MappedException: 0 ),
  (Code:  VAC_PROCESS_CONTROL_E_V1_NOT_WORKING                     ;  Str:'VAC_PROCESS_CONTROL_E_V1_NOT_WORKING'; MappedException: 0 ),
  (Code:  VAC_PROCESS_CONTROL_E_CHMBR_PRESSURE_TOO_HIGH_V1         ;  Str:'VAC_PROCESS_CONTROL_E_CHMBR_PRESSURE_TOO_HIGH_V1'; MappedException: 0 ),
  (Code:  VAC_PROCESS_CONTROL_E_CHMBR_PRESSURE_TOO_LOW             ;  Str:'VAC_PROCESS_CONTROL_E_CHMBR_PRESSURE_TOO_LOW'; MappedException: 0 ),
  (Code:  VAC_PROCESS_CONTROL_E_CHMBR_PRESSURE_NOT_CONFIRMED_START_ION_PUMP    ;  Str:'VAC_PROCESS_CONTROL_E_CHMBR_PRESSURE_NOT_CONFIRMED_START_ION_PUMP'; MappedException: 0 ),
  (Code:  VAC_PROCESS_CONTROL_E_INTRO_NOT_PUMPED_DOWN              ;  Str:'VAC_PROCESS_CONTROL_E_INTRO_NOT_PUMPED_DOWN'; MappedException: 0 ),
  (Code:  VAC_PROCESS_CONTROL_E_TURBO_V1_NOT_WORKING               ;  Str:'VAC_PROCESS_CONTROL_E_TURBO_V1_NOT_WORKING'; MappedException: 0 ),
  (Code:  VAC_PROCESS_CONTROL_E_CHMBR_PRESSURE_NOT_CONFIRMED_BACKFILL_CHMBR    ;  Str:'VAC_PROCESS_CONTROL_E_CHMBR_PRESSURE_NOT_CONFIRMED_BACKFILL_CHMBR'; MappedException: 0 ),
  (Code:  VAC_PROCESS_CONTROL_E_V1_STUCK                           ;  Str:'VAC_PROCESS_CONTROL_E_V1_STUCK'; MappedException: 0 ),
  (Code:  VAC_PROCESS_CONTROL_E_SYSTEM_NOT_PUMPED_DOWN             ;  Str:'VAC_PROCESS_CONTROL_E_SYSTEM_NOT_PUMPED_DOWN'; MappedException: 0 ),
  (Code:  VAC_PROCESS_CONTROL_E_TURBO_PUMP_CHMBR_NOT_CONFIRMED     ;  Str:'VAC_PROCESS_CONTROL_E_TURBO_PUMP_CHMBR_NOT_CONFIRMED'; MappedException: 0 ),
  (Code:  VAC_PROCESS_CONTROL_E_V1_STUCK_OR_ARM_IN_INTRO           ;  Str:'VAC_PROCESS_CONTROL_E_V1_STUCK_OR_ARM_IN_INTRO'; MappedException: 0 ),
  (Code:  VAC_PROCESS_CONTROL_E_INTRO_PRESSURE_NOT_CONFIRMED       ;  Str:'VAC_PROCESS_CONTROL_E_INTRO_PRESSURE_NOT_CONFIRMED'; MappedException: 0 ),
  (Code:  VAC_PROCESS_CONTROL_E_INTRO_NOT_VENTED                   ;  Str:'VAC_PROCESS_CONTROL_E_INTRO_NOT_VENTED'; MappedException: 0 ),
  (Code:  VAC_PROCESS_CONTROL_E_CHMBR_PRESSURE_NOT_CONFIRMED       ;  Str:'VAC_PROCESS_CONTROL_E_CHMBR_PRESSURE_NOT_CONFIRMED'; MappedException: 0 ),
  (Code:  VAC_PROCESS_CONTROL_E_ARGON_LEAK_ON                      ;  Str:'VAC_PROCESS_CONTROL_E_ARGON_LEAK_ON'; MappedException: 0 ),
  (Code:  VAC_PROCESS_CONTROL_E_OXYGEN_LEAK_ON                     ;  Str:'VAC_PROCESS_CONTROL_E_OXYGEN_LEAK_ON'; MappedException: 0 ),
  (Code:  VAC_PROCESS_CONTROL_E_CHMBR_PRESSURE_TOO_HIGH            ;  Str:'VAC_PROCESS_CONTROL_E_CHMBR_PRESSURE_TOO_HIGH'; MappedException: 0 ),
  (Code:  VAC_PROCESS_CONTROL_E_DIFF_PUMP_IS_OFF                   ;  Str:'VAC_PROCESS_CONTROL_E_DIFF_PUMP_IS_OFF'; MappedException: 0 ),
  (Code:  VAC_PROCESS_CONTROL_E_MAIN_TURBO_NOT_OFF                 ;  Str:'VAC_PROCESS_CONTROL_E_MAIN_TURBO_NOT_OFF'; MappedException: 0 ),
  (Code:  VAC_PROCESS_CONTROL_E_NO_TASK_TO_RESUME                  ;  Str:'VAC_PROCESS_CONTROL_E_NO_TASK_TO_RESUME'; MappedException: 0 ),
  (Code:  VAC_PROCESS_CONTROL_E_HC_STAGE_TEMP_DISALLOW_BACKFILL_INTRO  ;  Str:'VAC_PROCESS_CONTROL_E_HC_STAGE_TEMP_DISALLOW_BACKFILL_INTRO'; MappedException: 0 ),
  (Code:  VAC_PROCESS_CONTROL_E_MAIN_TMP_SPEED_TOO_LOW             ;  Str:'VAC_PROCESS_CONTROL_E_MAIN_TMP_SPEED_TOO_LOW'; MappedException: 0 ),
  (Code:  VAC_PROCESS_CONTROL_E_PRESSURE_READ_OUT_OF_RANGE         ;  Str:'VAC_PROCESS_CONTROL_E_PRESSURE_READ_OUT_OF_RANGE'; MappedException: 0 ),
  (Code:  VAC_PROCESS_CONTROL_E_PRESSURE_READ_ERROR                ;  Str:'VAC_PROCESS_CONTROL_E_PRESSURE_READ_ERROR'; MappedException: 0 ),

  (Code:  CAMERA_CONTROL_E_INITIALIZE                              ;  Str:'CAMERA_CONTROL_E_INITIALIZE'; MappedException: 0 ),
  (Code:  CAMERA_CONTROL_E_CAMERANOTFOUND                          ;  Str:'CAMERA_CONTROL_E_CAMERANOTFOUND'; MappedException: 0 ),
  (Code:  CAMERA_CONTROL_E_UNABLEGETDEVICEINFO                     ;  Str:'CAMERA_CONTROL_E_UNABLEGETDEVICEINFO'; MappedException: 0 ),
  (Code:  CAMERA_CONTROL_E_CONNECT                                 ;  Str:'CAMERA_CONTROL_E_CONNECT'; MappedException: 0 ),
  (Code:  CAMERA_CONTROL_E_UILOCK                                  ;  Str:'CAMERA_CONTROL_E_UILOCK'; MappedException: 0 ),
  (Code:  CAMERA_CONTROL_E_TAKEPICTURE                             ;  Str:'CAMERA_CONTROL_E_TAKEPICTURE'; MappedException: 0 ),
  (Code:  CAMERA_CONTROL_E_FILETRANSFER                            ;  Str:'CAMERA_CONTROL_E_FILETRANSFER'; MappedException: 0 ),
  (Code:  CAMERA_CONTROL_E_PROPERTY                                ;  Str:'CAMERA_CONTROL_E_PROPERTY'; MappedException: 0 ),
  (Code:  CAMERA_CONTROL_E_AFNG                                    ;  Str:'CAMERA_CONTROL_E_AFNG'; MappedException: 0 ),
  (Code:  CAMERA_CONTROL_E_PRESSSHUTTERBUTTONOFF                   ;  Str:'CAMERA_CONTROL_E_PRESSSHUTTERBUTTONOFF'; MappedException: 0 ),

  (Code:  ION_GUN_PROCESS_CONTROL_E_BUSY                           ;  Str:'ION_GUN_PROCESS_CONTROL_E_BUSY'; MappedException: 0 ),
  (Code:  ION_GUN_PROCESS_CONTROL_E_ABORTED                        ;  Str:'ION_GUN_PROCESS_CONTROL_E_ABORTED'; MappedException: 0 ),
  (Code:  ION_GUN_PROCESS_CONTROL_E_VAC_ERROR                      ;  Str:'ION_GUN_PROCESS_CONTROL_E_VAC_ERROR'; MappedException: 0 ),
  (Code:  ION_GUN_PROCESS_CONTROL_E_TIMEOUT                        ;  Str:'ION_GUN_PROCESS_CONTROL_E_TIMEOUT'; MappedException: 0 ),
  (Code:  ION_GUN_PROCESS_CONTROL_E_TIMED_ON                       ;  Str:'ION_GUN_PROCESS_CONTROL_E_TIMED_ON'; MappedException: 0 ),

  (Code:  C60_GUN_OFF_CANNOT_READ                                  ;  Str:'C60_GUN_OFF_CANNOT_READ'; MappedException: 0 ),

  (Code:  DUAL_ANODE_XRAY_E_INVALID_PARAMETER_RANGE                ;  Str:'DUAL_ANODE_XRAY_E_INVALID_PARAMETER_RANGE'; MappedException: 0 ),
  (Code:  DUAL_ANODE_XRAY_E_EXCEED_POWER_LIMIT                     ;  Str:'DUAL_ANODE_XRAY_E_EXCEED_POWER_LIMIT'; MappedException: 0 ),
  (Code:  DUAL_ANODE_XRAY_E_INTERLOCKS_NOT_MET                     ;  Str:'DUAL_ANODE_XRAY_E_INTERLOCKS_NOT_MET'; MappedException: 0 ),

  (Code:  C60_ION_GUN_PROCESS_CONTROL_E_BUSY                       ;  Str:'C60_ION_GUN_PROCESS_CONTROL_E_BUSY'; MappedException: 0 ),
  (Code:  C60_ION_GUN_PROCESS_CONTROL_E_ABORTED                    ;  Str:'C60_ION_GUN_PROCESS_CONTROL_E_ABORTED'; MappedException: 0 ),
  (Code:  C60_ION_GUN_PROCESS_CONTROL_E_TIMEOUT                    ;  Str:'C60_ION_GUN_PROCESS_CONTROL_E_TIMEOUT'; MappedException: 0 ),
  (Code:  C60_ION_GUN_PROCESS_CONTROL_E_TIMED_ON                   ;  Str:'C60_ION_GUN_PROCESS_CONTROL_E_TIMED_ON'; MappedException: 0 ),

  (Code:  IMAGE_REGISTRATION_E_MMF                                 ;  Str:'IMAGE_REGISTRATION_E_MMF'; MappedException: 0 ),
  (Code:  IMAGE_REGISTRATION_E_HIT_EDGE                            ;  Str:'IMAGE_REGISTRATION_E_HIT_EDGE'; MappedException: 0 ),

  (Code:  IMAGE_REGISTRATION_PROCESS_CONTROL_E_ABORTED             ;  Str:'IMAGE_REGISTRATION_PROCESS_CONTROL_E_ABORTED'; MappedException: 0 ),
  (Code:  IMAGE_REGISTRATION_PROCESS_CONTROL_E_START_SEM           ;  Str:'IMAGE_REGISTRATION_PROCESS_CONTROL_E_START_SEM'; MappedException: 0 ),
  (Code:  IMAGE_REGISTRATION_PROCESS_CONTROL_E_ROUTINE_SEARCH      ;  Str:'IMAGE_REGISTRATION_PROCESS_CONTROL_E_ROUTINE_SEARCH'; MappedException: 0 ),
  (Code:  IMAGE_REGISTRATION_PROCESS_CONTROL_E_BUSY                ;  Str:'IMAGE_REGISTRATION_PROCESS_CONTROL_E_BUSY'; MappedException: 0 ),
  (Code:  IMAGE_REGISTRATION_PROCESS_CONTROL_E_LOAD_REF_IMAGE      ;  Str:'IMAGE_REGISTRATION_PROCESS_CONTROL_E_LOAD_REF_IMAGE'; MappedException: 0 ),
  (Code:  IMAGE_REGISTRATION_PROCESS_CONTROL_E_REF_IMAGE_NOT_EXIST ;  Str:'IMAGE_REGISTRATION_PROCESS_CONTROL_E_REF_IMAGE_NOT_EXIST'; MappedException: 0 ),
  (Code:  IMAGE_REGISTRATION_PROCESS_CONTROL_E_NO_TASK_TO_RESTART  ;  Str:'IMAGE_REGISTRATION_PROCESS_CONTROL_E_NO_TASK_TO_RESTART'; MappedException: 0 ),
  (Code:  IMAGE_REGISTRATION_PROCESS_CONTROL_E_SET_HARDWARE        ;  Str:'IMAGE_REGISTRATION_PROCESS_CONTROL_E_SET_HARDWARE'; MappedException: 0 ),
  (Code:  IMAGE_REGISTRATION_PROCESS_CONTROL_E_ACQ                 ;  Str:'IMAGE_REGISTRATION_PROCESS_CONTROL_E_ACQ'; MappedException: 0 ),
  (Code:  IMAGE_REGISTRATION_PROCESS_CONTROL_E_IGNORE_ERROR        ;  Str:'IMAGE_REGISTRATION_PROCESS_CONTROL_E_IGNORE_ERROR'; MappedException: 0 ),
  (Code:  IMAGE_REGISTRATION_PROCESS_CONTROL_E_ROUTINE_CONFIDENCE_LOW_ERROR   ;  Str:'IMAGE_REGISTRATION_PROCESS_CONTROL_E_ROUTINE_CONFIDENCE_LOW_ERROR'; MappedException: 0 ),
  (Code:  IMAGE_REGISTRATION_PROCESS_CONTROL_E_SCAN_PATTERN_CLIPPING_ERROR    ;  Str:'IMAGE_REGISTRATION_PROCESS_CONTROL_E_SCAN_PATTERN_CLIPPING_ERROR'; MappedException: 0 ),

  (Code:  GCIB_PROCESS_CONTROL_E_BUSY                              ;  Str:'GCIB_PROCESS_CONTROL_E_BUSY'; MappedException: 0 ),
  (Code:  GCIB_PROCESS_CONTROL_E_ABORTED                           ;  Str:'GCIB_PROCESS_CONTROL_E_ABORTED'; MappedException: 0 ),
  (Code:  GCIB_PROCESS_CONTROL_E_TIMEOUT                           ;  Str:'GCIB_PROCESS_CONTROL_E_TIMEOUT'; MappedException: 0 ),
  (Code:  GCIB_PROCESS_CONTROL_E_TIMED_ON                          ;  Str:'GCIB_PROCESS_CONTROL_E_TIMED_ON'; MappedException: 0 ),
  (Code:  GCIB_PROCESS_CONTROL_E_INTERLOCK                         ;  Str:'GCIB_PROCESS_CONTROL_E_INTERLOCK'; MappedException: 0 ),

  (Code:  DECONVOLUTION_E_BAD_TARGET_PE                            ;  Str:'DECONVOLUTION_E_BAD_TARGET_PE'; MappedException: 0 ),
  (Code:  DECONVOLUTION_E_NO_CALIB_FILE_AVAILABLE                  ;  Str:'DECONVOLUTION_E_NO_CALIB_FILE_AVAILABLE'; MappedException: 0 ),
  (Code:  DECONVOLUTION_E_BAD_CALIB_PATH                           ;  Str:'DECONVOLUTION_E_BAD_CALIB_PATH'; MappedException: 0 ),

  (Code:  GAUGE_E_GAUGE_NOT_SUPPORTED                              ;  Str:'GAUGE_E_GAUGE_NOT_SUPPORTED'; MappedException: 0 ),

  (Code:  AMMETER_PROCESS_CONTROL_E_ABORTED                        ;  Str:'AMMETER_PROCESS_CONTROL_E_ABORTED'; MappedException: 0 ),
  (Code:  AMMETER_PROCESS_CONTROL_E_BUSY                           ;  Str:'AMMETER_PROCESS_CONTROL_E_BUSY'; MappedException: 0 ),

  (Code:  SEM_PROCESS_CONTROL_E_ABORTED                            ;  Str:'SEM_PROCESS_CONTROL_E_ABORTED'; MappedException: 0 ),
  (Code:  SEM_PROCESS_CONTROL_E_BUSY                               ;  Str:'SEM_PROCESS_CONTROL_E_BUSY'; MappedException: 0 ),
  (Code:  SEM_PROCESS_CONTROL_E_CANNOT_START_FE                    ;  Str:'SEM_PROCESS_CONTROL_E_CANNOT_START_FE'; MappedException: 0 ),

  (Code:  HMPC_E_NO_ACTION_PERFORMED                               ;  Str:'HMPC_E_NO_ACTION_PERFORMED'; MappedException: 0 ),

  (Code:  XRAY_PROCESS_CONTROL_E_BUSY                              ;  Str:'ION_GUN_PROCESS_CONTROL_E_BUSY'; MappedException: 0 ),
  (Code:  XRAY_PROCESS_CONTROL_E_ABORTED                           ;  Str:'XRAY_PROCESS_CONTROL_E_ABORTED'; MappedException: 0 ),
  (Code:  XRAY_PROCESS_CONTROL_E_INTERFACE_UNASSIGNED              ;  Str:'XRAY_PROCESS_CONTROL_E_INTERFACE_UNASSIGNED'; MappedException: 0 ),

  (Code:  AUTO_VIDEO_PROCESS_CONTROL_E_ABORTED                     ;  Str:'AUTO_VIDEO_PROCESS_CONTROL_E_ABORTED'; MappedException: 0 ),
  (Code:  AUTO_VIDEO_PROCESS_CONTROL_E_BUSY                        ;  Str:'AUTO_VIDEO_PROCESS_CONTROL_E_BUSY'; MappedException: 0 ),
  (Code:  AUTO_VIDEO_PROCESS_CONTROL_E_NO_TASK_TO_RESTART          ;  Str:'AUTO_VIDEO_PROCESS_CONTROL_E_NO_TASK_TO_RESTART'; MappedException: 0 ),
  (Code:  AUTO_VIDEO_PROCESS_CONTROL_E_SET_HARDWARE                ;  Str:'AUTO_VIDEO_PROCESS_CONTROL_E_SET_HARDWARE'; MappedException: 0 ),
  (Code:  AUTO_VIDEO_PROCESS_CONTROL_E_ACQ                         ;  Str:'AUTO_VIDEO_PROCESS_CONTROL_E_ACQ'; MappedException: 0 ),
  (Code:  AUTO_VIDEO_PROCESS_CONTROL_E_START_SEM                   ;  Str:'AUTO_VIDEO_PROCESS_CONTROL_E_START_SEM'; MappedException: 0 ),

  (Code:  DSI_E_NEED_INIT                                          ;  Str:'DSI_E_NEED_INIT'; MappedException: 0 ),
  (Code:  DSI_E_INVALID_CMD                                        ;  Str:'DSI_E_INVALID_CMD'; MappedException: 0 ),
  (Code:  DSI_E_INVALID_PARAMETER_                                 ;  Str:'DSI_E_INVALID_PARAMETER_'; MappedException: 0 ),
  (Code:  DSI_E_SAMPLE_BIAS_NOT_GROUNDED                           ;  Str:'DSI_E_SAMPLE_BIAS_NOT_GROUNDED'; MappedException: 0 ),
  (Code:  DSI_E_SHUTDOWN                                           ;  Str:'DSI_E_SHUTDOWN'; MappedException: 0 ),
  (Code:  DSI_E_SERVER_BUSY                                        ;  Str:'DSI_E_SERVER_BUSY'; MappedException: 0 ),

  (Code:  HOTCOLD_PROCESS_CONTROL_E_BUSY                           ;  Str:'HOTCOLD_PROCESS_CONTROL_E_BUSY'; MappedException: 0 ),
  (Code:  HOTCOLD_PROCESS_CONTROL_E_ABORTED                        ;  Str:'HOTCOLD_PROCESS_CONTROL_E_ABORTED'; MappedException: 0 ),
  (Code:  HOTCOLD_PROCESS_CONTROL_E_TIMEOUT                        ;  Str:'HOTCOLD_PROCESS_CONTROL_E_TIMEOUT'; MappedException: 0 ),
  (Code:  HOTCOLD_PROCESS_CONTROL_E_CTRLSTATE_IS_FAIL              ;  Str:'HOTCOLD_PROCESS_CONTROL_E_CTRLSTATE_IS_FAIL'; MappedException: 0 ),
  (Code:  HOTCOLD_PROCESS_CONTROL_E_CTRLSTATE_IS_OPEN              ;  Str:'HOTCOLD_PROCESS_CONTROL_E_CTRLSTATE_IS_OPEN'; MappedException: 0 )
  );

function MakeHResult(const ErrorCode: Integer): HResult;

// Win32 API helper functions.
procedure CheckHandle(h: THandle);
procedure CheckReturnCode(rc: Integer; desiredCode:Integer); overload;
procedure CheckReturnCode(rc: BOOL); overload;

implementation


function MakeHResult(const ErrorCode: Integer): HResult;
begin
  Result := MakeResult(SEVERITY_ERROR, FACILITY_ITF, ErrorCode);
end;

procedure CheckHandle(h: THandle);
// Used to check the many Win32 API functions that return a handle. By
// encapsulating error checking here it can be changed if this is not sufficient.
begin

  if(h = INVALID_HANDLE_VALUE) then
  begin
    RaiseLastOSError();
  end;
end;

procedure CheckReturnCode(rc: Integer; desiredCode:Integer);
// Used to check the many Win32 API functions that state successful if return
// result is greater than one. By encapsulating error checking here it can be
// changed if this is not sufficient.
begin

  if(rc <> desiredCode) then
  begin
    RaiseLastOSError();
  end;
end;

procedure CheckReturnCode(rc: BOOL);
// Used to check the many Win32 API functions that state successful if return
// result is greater than one. By encapsulating error checking here it can be
// changed if this is not sufficient.
begin

  if(rc = FALSE) then
  begin
    RaiseLastOSError();
  end;
end;

end.
